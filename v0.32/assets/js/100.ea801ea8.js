(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{339:function(e,t,a){"use strict";a.r(t);var s=a(1),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"quick-start"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quick-start"}}),e._v(" Quick Start")]),e._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}}),e._v(" Overview")]),e._v(" "),a("p",[e._v("This is a quick start guide. If you have a vague idea about how "),a("df",{attrs:{value:"tendermint"}},[e._v("Tendermint")]),e._v("\nworks and want to get started right away, continue.")],1),e._v(" "),a("h2",{attrs:{id:"install"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install"}}),e._v(" Install")]),e._v(" "),a("h3",{attrs:{id:"quick-install"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quick-install"}}),e._v(" Quick Install")]),e._v(" "),a("p",[e._v("To quickly get Tendermint installed on a fresh\nUbuntu 16.04 machine, use "),a("a",{attrs:{href:"https://git.io/fFfOR",target:"_blank",rel:"noopener noreferrer"}},[e._v("this script"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("WARNING: do not run this on your local machine.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("curl -L https://git.io/fFfOR | bash\nsource ~/.profile\n")])])]),a("p",[e._v("The script is also used to facilitate cluster deployment below.")]),e._v(" "),a("h3",{attrs:{id:"manual-install"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#manual-install"}}),e._v(" Manual Install")]),e._v(" "),a("p",[e._v("For manual installation, see the "),a("router-link",{attrs:{to:"/introduction/install.html"}},[e._v("install instructions")])],1),e._v(" "),a("h2",{attrs:{id:"initialization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialization"}}),e._v(" Initialization")]),e._v(" "),a("p",[e._v("Running:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("tendermint init\n")])])]),a("p",[e._v("will create the required files for a single, local node.")]),e._v(" "),a("p",[e._v("These files are found in "),a("code",[e._v("$HOME/.tendermint")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ ls $HOME/.tendermint\n\nconfig  data\n\n$ ls $HOME/.tendermint/config/\n\nconfig.toml  genesis.json  node_key.json  priv_validator.json\n")])])]),a("p",[e._v("For a single, local node, no further configuration is required.\nConfiguring a cluster is covered further below.")]),e._v(" "),a("h2",{attrs:{id:"local-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#local-node"}}),e._v(" Local Node")]),e._v(" "),a("p",[e._v("Start tendermint with a simple in-process application:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("tendermint node --proxy_app=kvstore\n")])])]),a("p",[e._v("and blocks will start to stream in:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("I[01-06|01:45:15.592] Executed block                               module=state height=1 validTxs=0 invalidTxs=0\nI[01-06|01:45:15.624] Committed state                              module=state height=1 txs=0 appHash=\n")])])]),a("p",[e._v("Check the status with:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("curl -s localhost:26657/status\n")])])]),a("h3",{attrs:{id:"sending-transactions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sending-transactions"}}),e._v(" Sending Transactions")]),e._v(" "),a("p",[e._v("With the kvstore app running, we can send transactions:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("curl -s 'localhost:26657/broadcast_tx_commit?tx=\"abcd\"'\n")])])]),a("p",[e._v("and check that it worked with:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("curl -s 'localhost:26657/abci_query?data=\"abcd\"'\n")])])]),a("p",[e._v("We can send transactions with a key and value too:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("curl -s 'localhost:26657/broadcast_tx_commit?tx=\"name=satoshi\"'\n")])])]),a("p",[e._v("and query the key:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("curl -s 'localhost:26657/abci_query?data=\"name\"'\n")])])]),a("p",[e._v("where the value is returned in hex.")]),e._v(" "),a("h2",{attrs:{id:"cluster-of-nodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cluster-of-nodes"}}),e._v(" Cluster of Nodes")]),e._v(" "),a("p",[e._v("First create four Ubuntu cloud machines. The following was tested on Digital\nOcean Ubuntu 16.04 x64 (3GB/1CPU, 20GB SSD). We'll refer to their respective IP\naddresses below as IP1, IP2, IP3, IP4.")]),e._v(" "),a("p",[e._v("Then, "),a("code",[e._v("ssh")]),e._v(" into each machine, and execute "),a("a",{attrs:{href:"https://git.io/fFfOR",target:"_blank",rel:"noopener noreferrer"}},[e._v("this script"),a("OutboundLink")],1),e._v(":")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("curl -L https://git.io/fFfOR | bash\nsource ~/.profile\n")])])]),a("p",[e._v("This will install "),a("code",[e._v("go")]),e._v(" and other dependencies, get the Tendermint source code, then compile the "),a("code",[e._v("tendermint")]),e._v(" binary.")]),e._v(" "),a("p",[e._v("Next, use the "),a("code",[e._v("tendermint testnet")]),e._v(" command to create four directories of config files (found in "),a("code",[e._v("./mytestnet")]),e._v(") and copy each directory to the relevant machine in the cloud, so that each machine has "),a("code",[e._v("$HOME/mytestnet/node[0-3]")]),e._v(" directory.")]),e._v(" "),a("p",[e._v("Before you can start the network, you'll need peers identifiers (IPs are not enough and can change). We'll refer to them as ID1, ID2, ID3, ID4.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("tendermint show_node_id --home ./mytestnet/node0\ntendermint show_node_id --home ./mytestnet/node1\ntendermint show_node_id --home ./mytestnet/node2\ntendermint show_node_id --home ./mytestnet/node3\n")])])]),a("p",[e._v("Finally, from each machine, run:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('tendermint node --home ./mytestnet/node0 --proxy_app=kvstore --p2p.persistent_peers="ID1@IP1:26656,ID2@IP2:26656,ID3@IP3:26656,ID4@IP4:26656"\ntendermint node --home ./mytestnet/node1 --proxy_app=kvstore --p2p.persistent_peers="ID1@IP1:26656,ID2@IP2:26656,ID3@IP3:26656,ID4@IP4:26656"\ntendermint node --home ./mytestnet/node2 --proxy_app=kvstore --p2p.persistent_peers="ID1@IP1:26656,ID2@IP2:26656,ID3@IP3:26656,ID4@IP4:26656"\ntendermint node --home ./mytestnet/node3 --proxy_app=kvstore --p2p.persistent_peers="ID1@IP1:26656,ID2@IP2:26656,ID3@IP3:26656,ID4@IP4:26656"\n')])])]),a("p",[e._v("Note that after the third node is started, blocks will start to stream in\nbecause >2/3 of validators (defined in the "),a("code",[e._v("genesis.json")]),e._v(") have come online.\nPersistent peers can also be specified in the "),a("code",[e._v("config.toml")]),e._v(". See "),a("router-link",{attrs:{to:"/tendermint-core/configuration.html"}},[e._v("here")]),e._v(" for more information about configuration options.")],1),e._v(" "),a("p",[e._v("Transactions can then be sent as covered in the single, local node example above.")])])}),[],!1,null,null,null);t.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{420:function(e,t,n){"use strict";n.r(t);var o=n(1),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"how-to-read-logs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#how-to-read-logs"}}),e._v(" How to read logs")]),e._v(" "),n("h2",{attrs:{id:"walkabout-example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#walkabout-example"}}),e._v(" Walkabout example")]),e._v(" "),n("p",[e._v("We first create three connections (mempool, consensus and query) to the\napplication (running "),n("code",[e._v("kvstore")]),e._v(" locally in this case).")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("I[10-04|13:54:27.364] Starting multiAppConn                        module=proxy impl=multiAppConn\nI[10-04|13:54:27.366] Starting localClient                         module=abci-client connection=query impl=localClient\nI[10-04|13:54:27.366] Starting localClient                         module=abci-client connection=mempool impl=localClient\nI[10-04|13:54:27.367] Starting localClient                         module=abci-client connection=consensus impl=localClient\n")])])]),n("p",[e._v("Then Tendermint Core and the application perform a handshake.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("I[10-04|13:54:27.367] ABCI Handshake                               module=consensus appHeight=90 appHash=E0FBAFBF6FCED8B9786DDFEB1A0D4FA2501BADAD\nI[10-04|13:54:27.368] ABCI Replay Blocks                           module=consensus appHeight=90 storeHeight=90 stateHeight=90\nI[10-04|13:54:27.368] Completed ABCI Handshake - Tendermint and App are synced module=consensus appHeight=90 appHash=E0FBAFBF6FCED8B9786DDFEB1A0D4FA2501BADAD\n")])])]),n("p",[e._v("After that, we start a few more things like the event switch, reactors,\nand perform UPNP discover in order to detect the IP address.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('I[10-04|13:54:27.374] Starting EventSwitch                         module=types impl=EventSwitch\nI[10-04|13:54:27.375] This node is a validator                     module=consensus\nI[10-04|13:54:27.379] Starting Node                                module=main impl=Node\nI[10-04|13:54:27.381] Local listener                               module=p2p ip=:: port=26656\nI[10-04|13:54:27.382] Getting UPNP external address                module=p2p\nI[10-04|13:54:30.386] Could not perform UPNP discover              module=p2p err="write udp4 0.0.0.0:38238->239.255.255.250:1900: i/o timeout"\nI[10-04|13:54:30.386] Starting DefaultListener                     module=p2p impl=Listener(@10.0.2.15:26656)\nI[10-04|13:54:30.387] Starting P2P Switch                          module=p2p impl="P2P Switch"\nI[10-04|13:54:30.387] Starting MempoolReactor                      module=mempool impl=MempoolReactor\nI[10-04|13:54:30.387] Starting BlockchainReactor                   module=blockchain impl=BlockchainReactor\nI[10-04|13:54:30.387] Starting ConsensusReactor                    module=consensus impl=ConsensusReactor\nI[10-04|13:54:30.387] ConsensusReactor                             module=consensus fastSync=false\nI[10-04|13:54:30.387] Starting ConsensusState                      module=consensus impl=ConsensusState\nI[10-04|13:54:30.387] Starting WAL                                 module=consensus wal=/home/vagrant/.tendermint/data/cs.wal/wal impl=WAL\nI[10-04|13:54:30.388] Starting TimeoutTicker                       module=consensus impl=TimeoutTicker\n')])])]),n("p",[e._v('Notice the second row where Tendermint Core reports that "This node is a\nvalidator". It also could be just an observer (regular node).')]),e._v(" "),n("p",[e._v("Next we replay all the messages from the WAL.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("I[10-04|13:54:30.390] Catchup by replaying consensus messages      module=consensus height=91\nI[10-04|13:54:30.390] Replay: New Step                             module=consensus height=91 round=0 step=RoundStepNewHeight\nI[10-04|13:54:30.390] Replay: Done                                 module=consensus\n")])])]),n("p",[e._v('"Started node" message signals that everything is ready for work.')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('I[10-04|13:54:30.391] Starting RPC HTTP server on tcp socket 0.0.0.0:26657 module=rpc-server\nI[10-04|13:54:30.392] Started node                                 module=main nodeInfo="NodeInfo{id: DF22D7C92C91082324A1312F092AA1DA197FA598DBBFB6526E, moniker: anonymous, network: test-chain-3MNw2N [remote , listen 10.0.2.15:26656], version: 0.11.0-10f361fc ([wire_version=0.6.2 p2p_version=0.5.0 consensus_version=v1/0.2.2 rpc_version=0.7.0/3 tx_index=on rpc_addr=tcp://0.0.0.0:26657])}"\n')])])]),n("p",[e._v("Next follows a standard block creation cycle, where we enter a new\nround, propose a block, receive more than 2/3 of prevotes, then\nprecommits and finally have a chance to commit a block. For details,\nplease refer to "),n("router-link",{attrs:{to:"/introduction/introduction.html#consensus-overview"}},[e._v("Consensus\nOverview")]),e._v(" or "),n("router-link",{attrs:{to:"/spec/consensus/consensus.html"}},[e._v("Byzantine Consensus\nAlgorithm")]),e._v(".")],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('I[10-04|13:54:30.393] enterNewRound(91/0). Current: 91/0/RoundStepNewHeight module=consensus\nI[10-04|13:54:30.393] enterPropose(91/0). Current: 91/0/RoundStepNewRound module=consensus\nI[10-04|13:54:30.393] enterPropose: Our turn to propose            module=consensus proposer=125B0E3C5512F5C2B0E1109E31885C4511570C42 privValidator="PrivValidator{125B0E3C5512F5C2B0E1109E31885C4511570C42 LH:90, LR:0, LS:3}"\nI[10-04|13:54:30.394] Signed proposal                              module=consensus height=91 round=0 proposal="Proposal{91/0 1:21B79872514F (-1,:0:000000000000) {/10EDEDD7C84E.../}}"\nI[10-04|13:54:30.397] Received complete proposal block             module=consensus height=91 hash=F671D562C7B9242900A286E1882EE64E5556FE9E\nI[10-04|13:54:30.397] enterPrevote(91/0). Current: 91/0/RoundStepPropose module=consensus\nI[10-04|13:54:30.397] enterPrevote: ProposalBlock is valid         module=consensus height=91 round=0\nI[10-04|13:54:30.398] Signed and pushed vote                       module=consensus height=91 round=0 vote="Vote{0:125B0E3C5512 91/00/1(Prevote) F671D562C7B9 {/89047FFC21D8.../}}" err=null\nI[10-04|13:54:30.401] Added to prevote                             module=consensus vote="Vote{0:125B0E3C5512 91/00/1(Prevote) F671D562C7B9 {/89047FFC21D8.../}}" prevotes="VoteSet{H:91 R:0 T:1 +2/3:F671D562C7B9242900A286E1882EE64E5556FE9E:1:21B79872514F BA{1:X} map[]}"\nI[10-04|13:54:30.401] enterPrecommit(91/0). Current: 91/0/RoundStepPrevote module=consensus\nI[10-04|13:54:30.401] enterPrecommit: +2/3 prevoted proposal block. Locking module=consensus hash=F671D562C7B9242900A286E1882EE64E5556FE9E\nI[10-04|13:54:30.402] Signed and pushed vote                       module=consensus height=91 round=0 vote="Vote{0:125B0E3C5512 91/00/2(Precommit) F671D562C7B9 {/80533478E41A.../}}" err=null\nI[10-04|13:54:30.404] Added to precommit                           module=consensus vote="Vote{0:125B0E3C5512 91/00/2(Precommit) F671D562C7B9 {/80533478E41A.../}}" precommits="VoteSet{H:91 R:0 T:2 +2/3:F671D562C7B9242900A286E1882EE64E5556FE9E:1:21B79872514F BA{1:X} map[]}"\nI[10-04|13:54:30.404] enterCommit(91/0). Current: 91/0/RoundStepPrecommit module=consensus\nI[10-04|13:54:30.405] Finalizing commit of block with 0 txs        module=consensus height=91 hash=F671D562C7B9242900A286E1882EE64E5556FE9E root=E0FBAFBF6FCED8B9786DDFEB1A0D4FA2501BADAD\nI[10-04|13:54:30.405] Block{\n  Header{\n    ChainID:        test-chain-3MNw2N\n    Height:         91\n    Time:           2017-10-04 13:54:30.393 +0000 UTC\n    NumTxs:         0\n    LastBlockID:    F15AB8BEF9A6AAB07E457A6E16BC410546AA4DC6:1:D505DA273544\n    LastCommit:     56FEF2EFDB8B37E9C6E6D635749DF3169D5F005D\n    Data:\n    Validators:     CE25FBFF2E10C0D51AA1A07C064A96931BC8B297\n    App:            E0FBAFBF6FCED8B9786DDFEB1A0D4FA2501BADAD\n  }#F671D562C7B9242900A286E1882EE64E5556FE9E\n  Data{\n\n  }#\n  Commit{\n    BlockID:    F15AB8BEF9A6AAB07E457A6E16BC410546AA4DC6:1:D505DA273544\n    Precommits: Vote{0:125B0E3C5512 90/00/2(Precommit) F15AB8BEF9A6 {/FE98E2B956F0.../}}\n  }#56FEF2EFDB8B37E9C6E6D635749DF3169D5F005D\n}#F671D562C7B9242900A286E1882EE64E5556FE9E module=consensus\nI[10-04|13:54:30.408] Executed block                               module=state height=91 validTxs=0 invalidTxs=0\nI[10-04|13:54:30.410] Committed state                              module=state height=91 txs=0 hash=E0FBAFBF6FCED8B9786DDFEB1A0D4FA2501BADAD\nI[10-04|13:54:30.410] Recheck txs                                  module=mempool numtxs=0 height=91\n')])])]),n("h2",{attrs:{id:"list-of-modules"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#list-of-modules"}}),e._v(" List of modules")]),e._v(" "),n("p",[e._v("Here is the list of modules you may encounter in Tendermint's log and a\nlittle overview what they do.")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("abci-client")]),e._v(" As mentioned in "),n("router-link",{attrs:{to:"/app-dev/app-development.html"}},[e._v("Application Development Guide")]),e._v(", Tendermint acts as an ABCI\nclient with respect to the application and maintains 3 connections:\nmempool, consensus and query. The code used by Tendermint Core can\nbe found "),n("a",{attrs:{href:"https://github.com/tendermint/tendermint/tree/master/abci/client",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),e._v(".")],1),e._v(" "),n("li",[n("code",[e._v("blockchain")]),e._v(" Provides storage, pool (a group of peers), and reactor\nfor both storing and exchanging blocks between peers.")]),e._v(" "),n("li",[n("code",[e._v("consensus")]),e._v(' The heart of Tendermint core, which is the\nimplementation of the consensus algorithm. Includes two\n"submodules": '),n("code",[e._v("wal")]),e._v(" (write-ahead logging) for ensuring data\nintegrity and "),n("code",[e._v("replay")]),e._v(" to replay blocks and messages on recovery\nfrom a crash.")]),e._v(" "),n("li",[n("code",[e._v("events")]),e._v(" Simple event notification system. The list of events can be\nfound\n"),n("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/master/types/events.go",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),e._v(".\nYou can subscribe to them by calling "),n("code",[e._v("subscribe")]),e._v(" RPC method. Refer\nto "),n("router-link",{attrs:{to:"/tendermint-core/rpc.html"}},[e._v("RPC docs")]),e._v(" for additional information.")],1),e._v(" "),n("li",[n("code",[e._v("mempool")]),e._v(" Mempool module handles all incoming transactions, whenever\nthey are coming from peers or the application.")]),e._v(" "),n("li",[n("code",[e._v("p2p")]),e._v(" Provides an abstraction around peer-to-peer communication. For\nmore details, please check out the\n"),n("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/master/p2p/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("README"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("rpc")]),e._v(" "),n("router-link",{attrs:{to:"/tendermint-core/rpc.html"}},[e._v("Tendermint's RPC")]),e._v(".")],1),e._v(" "),n("li",[n("code",[e._v("rpc-server")]),e._v(" RPC server. For implementation details, please read the\n"),n("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/master/rpc/lib/doc.go",target:"_blank",rel:"noopener noreferrer"}},[e._v("doc.go"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("state")]),e._v(" Represents the latest state and execution submodule, which\nexecutes blocks against the application.")]),e._v(" "),n("li",[n("code",[e._v("types")]),e._v(" A collection of the publicly exposed types and methods to\nwork with them.")])])])}),[],!1,null,null,null);t.default=s.exports}}]);
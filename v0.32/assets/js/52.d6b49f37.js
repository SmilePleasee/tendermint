(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{290:function(t,e,s){"use strict";s.r(e);var a=s(1),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"adr-2-event-subscription"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#adr-2-event-subscription"}}),t._v(" ADR 2: Event Subscription")]),t._v(" "),s("h2",{attrs:{id:"context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#context"}}),t._v(" Context")]),t._v(" "),s("p",[t._v("In the light client (or any other client), the user may want to "),s("strong",[t._v("subscribe to\na subset of transactions")]),t._v(" (rather than all of them) using "),s("code",[t._v("/subscribe?event=X")]),t._v(". For\nexample, I want to subscribe for all transactions associated with a particular\naccount. Same for fetching. The user may want to "),s("strong",[t._v("fetch transactions based on\nsome filter")]),t._v(" (rather than fetching all the blocks). For example, I want to get\nall transactions for a particular account in the last two weeks ("),s("code",[t._v("tx's block time >= '2017-06-05'")]),t._v(").")]),t._v(" "),s("p",[t._v('Now you can\'t even subscribe to "all txs" in Tendermint.')]),t._v(" "),s("p",[t._v("The goal is a simple and easy to use API for doing that.")]),t._v(" "),s("p",[s("img",{attrs:{src:"img/tags1.png",alt:"Tx Send Flow Diagram"}})]),t._v(" "),s("h2",{attrs:{id:"decision"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#decision"}}),t._v(" Decision")]),t._v(" "),s("p",[t._v("ABCI app return tags with a "),s("code",[t._v("DeliverTx")]),t._v(" response inside the "),s("code",[t._v("data")]),t._v(" field ("),s("em",[t._v("for\nnow, later we may create a separate field")]),t._v("). Tags is a list of key-value pairs,\nprotobuf encoded.")]),t._v(" "),s("p",[t._v("Example data:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"abci.account.name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Igor"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"abci.account.address"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0xdeadbeef"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"tx.gas"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"subscribing-for-transactions-events"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#subscribing-for-transactions-events"}}),t._v(" Subscribing for transactions events")]),t._v(" "),s("p",[t._v("If the user wants to receive only a subset of transactions, ABCI-app must\nreturn a list of tags with a "),s("code",[t._v("DeliverTx")]),t._v(" response. These tags will be parsed and\nmatched with the current queries (subscribers). If the query matches the tags,\nsubscriber will get the transaction event.")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('/subscribe?query="tm.event = Tx AND tx.hash = AB0023433CF0334223212243BDD AND abci.account.invoice.number = 22"\n')])])]),s("p",[t._v("A new package must be developed to replace the current "),s("code",[t._v("events")]),t._v(" package. It\nwill allow clients to subscribe to a different types of events in the future:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('/subscribe?query="abci.account.invoice.number = 22"\n/subscribe?query="abci.account.invoice.owner CONTAINS Igor"\n')])])]),s("h3",{attrs:{id:"fetching-transactions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fetching-transactions"}}),t._v(" Fetching transactions")]),t._v(" "),s("p",[t._v("This is a bit tricky because a) we want to support a number of indexers, all of\nwhich have a different API b) we don't know whenever tags will be sufficient\nfor the most apps (I guess we'll see).")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('/txs/search?query="tx.hash = AB0023433CF0334223212243BDD AND abci.account.owner CONTAINS Igor"\n/txs/search?query="abci.account.owner = Igor"\n')])])]),s("p",[t._v("For historic queries we will need a indexing storage (Postgres, SQLite, ...).")]),t._v(" "),s("h3",{attrs:{id:"issues"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#issues"}}),t._v(" Issues")]),t._v(" "),s("ul",[s("li",[t._v("https://github.com/tendermint/basecoin/issues/91")]),t._v(" "),s("li",[t._v("https://github.com/tendermint/tendermint/issues/376")]),t._v(" "),s("li",[t._v("https://github.com/tendermint/tendermint/issues/287")]),t._v(" "),s("li",[t._v("https://github.com/tendermint/tendermint/issues/525 (related)")])]),t._v(" "),s("h2",{attrs:{id:"status"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#status"}}),t._v(" Status")]),t._v(" "),s("p",[t._v("proposed")]),t._v(" "),s("h2",{attrs:{id:"consequences"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#consequences"}}),t._v(" Consequences")]),t._v(" "),s("h3",{attrs:{id:"positive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#positive"}}),t._v(" Positive")]),t._v(" "),s("ul",[s("li",[t._v("same format for event notifications and search APIs")]),t._v(" "),s("li",[t._v("powerful enough query")])]),t._v(" "),s("h3",{attrs:{id:"negative"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#negative"}}),t._v(" Negative")]),t._v(" "),s("ul",[s("li",[t._v("performance of the "),s("code",[t._v("match")]),t._v(" function (where we have too many queries / subscribers)")]),t._v(" "),s("li",[t._v("there is an issue where there are too many txs in the DB")])]),t._v(" "),s("h3",{attrs:{id:"neutral"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#neutral"}}),t._v(" Neutral")])])}),[],!1,null,null,null);e.default=r.exports}}]);
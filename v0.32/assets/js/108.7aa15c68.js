(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{390:function(t,e,n){"use strict";n.r(e);var a=n(1),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"methods-and-types"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#methods-and-types"}}),t._v(" Methods and Types")]),t._v(" "),n("h2",{attrs:{id:"overview"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#overview"}}),t._v(" Overview")]),t._v(" "),n("p",[t._v("The ABCI message types are defined in a "),n("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/master/abci/types/types.proto",target:"_blank",rel:"noopener noreferrer"}},[t._v("protobuf\nfile"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("p",[t._v("ABCI methods are split across 3 separate ABCI "),n("em",[t._v("connections")]),t._v(":")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("Consensus Connection")]),t._v(": "),n("code",[t._v("InitChain, BeginBlock, DeliverTx, EndBlock, Commit")])]),t._v(" "),n("li",[n("code",[t._v("Mempool Connection")]),t._v(": "),n("code",[t._v("CheckTx")])]),t._v(" "),n("li",[n("code",[t._v("Info Connection")]),t._v(": "),n("code",[t._v("Info, SetOption, Query")])])]),t._v(" "),n("p",[t._v("The "),n("code",[t._v("Consensus Connection")]),t._v(" is driven by a consensus protocol and is responsible\nfor block execution.\nThe "),n("code",[t._v("Mempool Connection")]),t._v(" is for validating new transactions, before they're\nshared or included in a block.\nThe "),n("code",[t._v("Info Connection")]),t._v(" is for initialization and for queries from the user.")]),t._v(" "),n("p",[t._v("Additionally, there is a "),n("code",[t._v("Flush")]),t._v(" method that is called on every connection,\nand an "),n("code",[t._v("Echo")]),t._v(" method that is just for debugging.")]),t._v(" "),n("p",[t._v("More details on managing state across connections can be found in the section on\n"),n("router-link",{attrs:{to:"/spec/abci/apps.html"}},[t._v("ABCI Applications")]),t._v(".")],1),t._v(" "),n("h2",{attrs:{id:"errors"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#errors"}}),t._v(" Errors")]),t._v(" "),n("p",[t._v("Some methods ("),n("code",[t._v("Echo, Info, InitChain, BeginBlock, EndBlock, Commit")]),t._v("),\ndon't return errors because an error would indicate a critical failure\nin the application and there's nothing Tendermint can do. The problem\nshould be addressed and both Tendermint and the application restarted.")]),t._v(" "),n("p",[t._v("All other methods ("),n("code",[t._v("SetOption, Query, CheckTx, DeliverTx")]),t._v(") return an\napplication-specific response "),n("code",[t._v("Code uint32")]),t._v(", where only "),n("code",[t._v("0")]),t._v(" is reserved\nfor "),n("code",[t._v("OK")]),t._v(".")]),t._v(" "),n("p",[t._v("Finally, "),n("code",[t._v("Query")]),t._v(", "),n("code",[t._v("CheckTx")]),t._v(", and "),n("code",[t._v("DeliverTx")]),t._v(" include a "),n("code",[t._v("Codespace string")]),t._v(", whose\nintended use is to disambiguate "),n("code",[t._v("Code")]),t._v(" values returned by different domains of the\napplication. The "),n("code",[t._v("Codespace")]),t._v(" is a namespace for the "),n("code",[t._v("Code")]),t._v(".")]),t._v(" "),n("h2",{attrs:{id:"events"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#events"}}),t._v(" Events")]),t._v(" "),n("p",[t._v("Some methods ("),n("code",[t._v("CheckTx, BeginBlock, DeliverTx, EndBlock")]),t._v(")\ninclude an "),n("code",[t._v("Events")]),t._v(" field in their "),n("code",[t._v("Response*")]),t._v(". Each event contains a type and a\nlist of attributes, which are key-value pairs denoting something about what happened\nduring the method's execution.")]),t._v(" "),n("p",[t._v("Events can be used to index transactions and blocks according to what happened\nduring their execution. Note that the set of events returned for a block from\n"),n("code",[t._v("BeginBlock")]),t._v(" and "),n("code",[t._v("EndBlock")]),t._v(" are merged. In case both methods return the same\ntag, only the value defined in "),n("code",[t._v("EndBlock")]),t._v(" is used.")]),t._v(" "),n("p",[t._v("Each event has a "),n("code",[t._v("type")]),t._v(" which is meant to categorize the event for a particular\n"),n("code",[t._v("Response*")]),t._v(" or tx. A "),n("code",[t._v("Response*")]),t._v(" or tx may contain multiple events with duplicate\n"),n("code",[t._v("type")]),t._v(" values, where each distinct entry is meant to categorize attributes for a\nparticular event. Every key and value in an event's attributes must be UTF-8\nencoded strings along with the event type itself.")]),t._v(" "),n("p",[t._v("Example:")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v(" abci"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ResponseDeliverTx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n\tEvents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("abci"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"validator.provisions"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\tAttributes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" cmn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("KVPairs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tcmn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("KVPair"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"address"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"..."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t\tcmn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("KVPair"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"amount"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"..."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t\tcmn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("KVPair"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"balance"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"..."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"validator.provisions"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\tAttributes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" cmn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("KVPairs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tcmn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("KVPair"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"address"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"..."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t\tcmn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("KVPair"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"amount"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"..."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t\tcmn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("KVPair"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"balance"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"..."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"validator.slashed"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\tAttributes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" cmn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("KVPairs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tcmn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("KVPair"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"address"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"..."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t\tcmn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("KVPair"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"amount"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"..."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t\tcmn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("KVPair"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"reason"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"..."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"determinism"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#determinism"}}),t._v(" Determinism")]),t._v(" "),n("p",[t._v("ABCI applications must implement deterministic finite-state machines to be\nsecurely replicated by the Tendermint consensus. This means block execution\nover the Consensus Connection must be strictly deterministic: given the same\nordered set of requests, all nodes will compute identical responses, for all\nBeginBlock, DeliverTx, EndBlock, and Commit. This is critical, because the\nresponses are included in the header of the next block, either via a Merkle root\nor directly, so all nodes must agree on exactly what they are.")]),t._v(" "),n("p",[t._v("For this reason, it is recommended that applications not be exposed to any\nexternal user or process except via the ABCI connections to a consensus engine\nlike Tendermint Core. The application must only change its state based on input\nfrom block execution (BeginBlock, DeliverTx, EndBlock, Commit), and not through\nany other kind of request. This is the only way to ensure all nodes see the same\ntransactions and compute the same results.")]),t._v(" "),n("p",[t._v("If there is some non-determinism in the state machine, consensus will eventually\nfail as nodes disagree over the correct values for the block header. The\nnon-determinism must be fixed and the nodes restarted.")]),t._v(" "),n("p",[t._v("Sources of non-determinism in applications may include:")]),t._v(" "),n("ul",[n("li",[t._v("Hardware failures\n"),n("ul",[n("li",[t._v("Cosmic rays, overheating, etc.")])])]),t._v(" "),n("li",[t._v("Node-dependent state\n"),n("ul",[n("li",[t._v("Random numbers")]),t._v(" "),n("li",[t._v("Time")])])]),t._v(" "),n("li",[t._v("Underspecification\n"),n("ul",[n("li",[t._v("Library version changes")]),t._v(" "),n("li",[t._v("Race conditions")]),t._v(" "),n("li",[t._v("Floating point numbers")]),t._v(" "),n("li",[t._v("JSON serialization")]),t._v(" "),n("li",[t._v("Iterating through hash-tables/maps/dictionaries")])])]),t._v(" "),n("li",[t._v("External Sources\n"),n("ul",[n("li",[t._v("Filesystem")]),t._v(" "),n("li",[t._v("Network calls (eg. some external REST API service)")])])])]),t._v(" "),n("p",[t._v("See "),n("a",{attrs:{href:"https://github.com/tendermint/abci/issues/56",target:"_blank",rel:"noopener noreferrer"}},[t._v("#56"),n("OutboundLink")],1),t._v(" for original discussion.")]),t._v(" "),n("p",[t._v("Note that some methods ("),n("code",[t._v("SetOption, Query, CheckTx, DeliverTx")]),t._v(") return\nexplicitly non-deterministic data in the form of "),n("code",[t._v("Info")]),t._v(" and "),n("code",[t._v("Log")]),t._v(" fields. The "),n("code",[t._v("Log")]),t._v(" is\nintended for the literal output from the application's logger, while the\n"),n("code",[t._v("Info")]),t._v(" is any additional info that should be returned. These are the only fields\nthat are not included in block header computations, so we don't need agreement\non them. All other fields in the "),n("code",[t._v("Response*")]),t._v(" must be strictly deterministic.")]),t._v(" "),n("h2",{attrs:{id:"block-execution"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#block-execution"}}),t._v(" Block Execution")]),t._v(" "),n("p",[t._v("The first time a new blockchain is started, Tendermint calls\n"),n("code",[t._v("InitChain")]),t._v(". From then on, the following sequence of methods is executed for each\nblock:")]),t._v(" "),n("p",[n("code",[t._v("BeginBlock, [DeliverTx], EndBlock, Commit")])]),t._v(" "),n("p",[t._v("where one "),n("code",[t._v("DeliverTx")]),t._v(" is called for each transaction in the block.\nThe result is an updated application state.\nCryptographic commitments to the results of DeliverTx, EndBlock, and\nCommit are included in the header of the next block.")]),t._v(" "),n("h2",{attrs:{id:"messages"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#messages"}}),t._v(" Messages")]),t._v(" "),n("h3",{attrs:{id:"echo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#echo"}}),t._v(" Echo")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Request")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Message (string)")]),t._v(": A string to echo back")])])]),t._v(" "),n("li",[n("strong",[t._v("Response")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Message (string)")]),t._v(": The input string")])])]),t._v(" "),n("li",[n("strong",[t._v("Usage")]),t._v(":\n"),n("ul",[n("li",[t._v("Echo a string to test an abci client/server implementation")])])])]),t._v(" "),n("h3",{attrs:{id:"flush"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#flush"}}),t._v(" Flush")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Usage")]),t._v(":\n"),n("ul",[n("li",[t._v("Signals that messages queued on the client should be flushed to\nthe server. It is called periodically by the client\nimplementation to ensure asynchronous requests are actually\nsent, and is called immediately to make a synchronous request,\nwhich returns when the Flush response comes back.")])])])]),t._v(" "),n("h3",{attrs:{id:"info"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#info"}}),t._v(" Info")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Request")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Version (string)")]),t._v(": The Tendermint software semantic version")]),t._v(" "),n("li",[n("code",[t._v("BlockVersion (uint64)")]),t._v(": The Tendermint Block Protocol version")]),t._v(" "),n("li",[n("code",[t._v("P2PVersion (uint64)")]),t._v(": The Tendermint P2P Protocol version")])])]),t._v(" "),n("li",[n("strong",[t._v("Response")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Data (string)")]),t._v(": Some arbitrary information")]),t._v(" "),n("li",[n("code",[t._v("Version (string)")]),t._v(": The application software semantic version")]),t._v(" "),n("li",[n("code",[t._v("AppVersion (uint64)")]),t._v(": The application protocol version")]),t._v(" "),n("li",[n("code",[t._v("LastBlockHeight (int64)")]),t._v(": Latest block for which the app has\ncalled Commit")]),t._v(" "),n("li",[n("code",[t._v("LastBlockAppHash ([]byte)")]),t._v(": Latest result of Commit")])])]),t._v(" "),n("li",[n("strong",[t._v("Usage")]),t._v(":\n"),n("ul",[n("li",[t._v("Return information about the application state.")]),t._v(" "),n("li",[t._v("Used to sync Tendermint with the application during a handshake\nthat happens on startup.")]),t._v(" "),n("li",[t._v("The returned "),n("code",[t._v("AppVersion")]),t._v(" will be included in the Header of every block.")]),t._v(" "),n("li",[t._v("Tendermint expects "),n("code",[t._v("LastBlockAppHash")]),t._v(" and "),n("code",[t._v("LastBlockHeight")]),t._v(" to\nbe updated during "),n("code",[t._v("Commit")]),t._v(", ensuring that "),n("code",[t._v("Commit")]),t._v(" is never\ncalled twice for the same block height.")])])])]),t._v(" "),n("h3",{attrs:{id:"setoption"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setoption"}}),t._v(" SetOption")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Request")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Key (string)")]),t._v(": Key to set")]),t._v(" "),n("li",[n("code",[t._v("Value (string)")]),t._v(": Value to set for key")])])]),t._v(" "),n("li",[n("strong",[t._v("Response")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Code (uint32)")]),t._v(": Response code")]),t._v(" "),n("li",[n("code",[t._v("Log (string)")]),t._v(": The output of the application's logger. May\nbe non-deterministic.")]),t._v(" "),n("li",[n("code",[t._v("Info (string)")]),t._v(": Additional information. May\nbe non-deterministic.")])])]),t._v(" "),n("li",[n("strong",[t._v("Usage")]),t._v(":\n"),n("ul",[n("li",[t._v("Set non-consensus critical application specific options.")]),t._v(" "),n("li",[t._v('e.g. Key="min-fee", Value="100fermion" could set the minimum fee\nrequired for CheckTx (but not DeliverTx - that would be\nconsensus critical).')])])])]),t._v(" "),n("h3",{attrs:{id:"initchain"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#initchain"}}),t._v(" InitChain")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Request")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Time (google.protobuf.Timestamp)")]),t._v(": Genesis time.")]),t._v(" "),n("li",[n("code",[t._v("ChainID (string)")]),t._v(": ID of the blockchain.")]),t._v(" "),n("li",[n("code",[t._v("ConsensusParams (ConsensusParams)")]),t._v(": Initial consensus-critical parameters.")]),t._v(" "),n("li",[n("code",[t._v("Validators ([]ValidatorUpdate)")]),t._v(": Initial genesis validators.")]),t._v(" "),n("li",[n("code",[t._v("AppStateBytes ([]byte)")]),t._v(": Serialized initial application state. Amino-encoded JSON bytes.")])])]),t._v(" "),n("li",[n("strong",[t._v("Response")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("ConsensusParams (ConsensusParams)")]),t._v(": Initial\nconsensus-critical parameters.")]),t._v(" "),n("li",[n("code",[t._v("Validators ([]ValidatorUpdate)")]),t._v(": Initial validator set (if non empty).")])])]),t._v(" "),n("li",[n("strong",[t._v("Usage")]),t._v(":\n"),n("ul",[n("li",[t._v("Called once upon genesis.")]),t._v(" "),n("li",[t._v("If ResponseInitChain.Validators is empty, the initial validator set will be the RequestInitChain.Validators")]),t._v(" "),n("li",[t._v("If ResponseInitChain.Validators is not empty, the initial validator set will be the\nResponseInitChain.Validators (regardless of what is in RequestInitChain.Validators).")]),t._v(" "),n("li",[t._v("This allows the app to decide if it wants to accept the initial validator\nset proposed by tendermint (ie. in the genesis file), or if it wants to use\na different one (perhaps computed based on some application specific\ninformation in the genesis file).")])])])]),t._v(" "),n("h3",{attrs:{id:"query"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#query"}}),t._v(" Query")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Request")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Data ([]byte)")]),t._v(": Raw query bytes. Can be used with or in lieu\nof Path.")]),t._v(" "),n("li",[n("code",[t._v("Path (string)")]),t._v(": Path of request, like an HTTP GET path. Can be\nused with or in liue of Data.\n"),n("ul",[n("li",[t._v("Apps MUST interpret '/store' as a query by key on the\nunderlying store. The key SHOULD be specified in the Data field.")]),t._v(" "),n("li",[t._v("Apps SHOULD allow queries over specific types like\n'/accounts/...' or '/votes/...'")])])]),t._v(" "),n("li",[n("code",[t._v("Height (int64)")]),t._v(": The block height for which you want the query\n(default=0 returns data for the latest committed block). Note\nthat this is the height of the block containing the\napplication's Merkle root hash, which represents the state as it\nwas after committing the block at Height-1")]),t._v(" "),n("li",[n("code",[t._v("Prove (bool)")]),t._v(": Return Merkle proof with response if possible")])])]),t._v(" "),n("li",[n("strong",[t._v("Response")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Code (uint32)")]),t._v(": Response code.")]),t._v(" "),n("li",[n("code",[t._v("Log (string)")]),t._v(": The output of the application's logger. May\nbe non-deterministic.")]),t._v(" "),n("li",[n("code",[t._v("Info (string)")]),t._v(": Additional information. May\nbe non-deterministic.")]),t._v(" "),n("li",[n("code",[t._v("Index (int64)")]),t._v(": The index of the key in the tree.")]),t._v(" "),n("li",[n("code",[t._v("Key ([]byte)")]),t._v(": The key of the matching data.")]),t._v(" "),n("li",[n("code",[t._v("Value ([]byte)")]),t._v(": The value of the matching data.")]),t._v(" "),n("li",[n("code",[t._v("Proof (Proof)")]),t._v(": Serialized proof for the value data, if requested, to be\nverified against the "),n("code",[t._v("AppHash")]),t._v(" for the given Height.")]),t._v(" "),n("li",[n("code",[t._v("Height (int64)")]),t._v(": The block height from which data was derived.\nNote that this is the height of the block containing the\napplication's Merkle root hash, which represents the state as it\nwas after committing the block at Height-1")]),t._v(" "),n("li",[n("code",[t._v("Codespace (string)")]),t._v(": Namespace for the "),n("code",[t._v("Code")]),t._v(".")])])]),t._v(" "),n("li",[n("strong",[t._v("Usage")]),t._v(":\n"),n("ul",[n("li",[t._v("Query for data from the application at current or past height.")]),t._v(" "),n("li",[t._v("Optionally return Merkle proof.")]),t._v(" "),n("li",[t._v("Merkle proof includes self-describing "),n("code",[t._v("type")]),t._v(" field to support many types\nof Merkle trees and encoding formats.")])])])]),t._v(" "),n("h3",{attrs:{id:"beginblock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#beginblock"}}),t._v(" BeginBlock")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Request")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Hash ([]byte)")]),t._v(": The block's hash. This can be derived from the\nblock header.")]),t._v(" "),n("li",[n("code",[t._v("Header (struct{})")]),t._v(": The block header.")]),t._v(" "),n("li",[n("code",[t._v("LastCommitInfo (LastCommitInfo)")]),t._v(": Info about the last commit, including the\nround, and the list of validators and which ones signed the last block.")]),t._v(" "),n("li",[n("code",[t._v("ByzantineValidators ([]Evidence)")]),t._v(": List of evidence of\nvalidators that acted maliciously.")])])]),t._v(" "),n("li",[n("strong",[t._v("Response")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Tags ([]cmn.KVPair)")]),t._v(": Key-Value tags for filtering and indexing")])])]),t._v(" "),n("li",[n("strong",[t._v("Usage")]),t._v(":\n"),n("ul",[n("li",[t._v("Signals the beginning of a new block. Called prior to\nany DeliverTxs.")]),t._v(" "),n("li",[t._v("The header contains the height, timestamp, and more - it exactly matches the\nTendermint block header. We may seek to generalize this in the future.")]),t._v(" "),n("li",[t._v("The "),n("code",[t._v("LastCommitInfo")]),t._v(" and "),n("code",[t._v("ByzantineValidators")]),t._v(" can be used to determine\nrewards and punishments for the validators. NOTE validators here do not\ninclude pubkeys.")])])])]),t._v(" "),n("h3",{attrs:{id:"checktx"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#checktx"}}),t._v(" CheckTx")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Request")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Tx ([]byte)")]),t._v(": The request transaction bytes")]),t._v(" "),n("li",[n("code",[t._v("Type (CheckTxType)")]),t._v(": What type of "),n("code",[t._v("CheckTx")]),t._v(" request is this? At present,\nthere are two possible values: "),n("code",[t._v("CheckTx_New")]),t._v(" (the default, which says\nthat a full check is required), and "),n("code",[t._v("CheckTx_Recheck")]),t._v(" (when the mempool is\ninitiating a normal recheck of a transaction).")])])]),t._v(" "),n("li",[n("strong",[t._v("Response")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Code (uint32)")]),t._v(": Response code")]),t._v(" "),n("li",[n("code",[t._v("Data ([]byte)")]),t._v(": Result bytes, if any.")]),t._v(" "),n("li",[n("code",[t._v("Log (string)")]),t._v(": The output of the application's logger. May\nbe non-deterministic.")]),t._v(" "),n("li",[n("code",[t._v("Info (string)")]),t._v(": Additional information. May\nbe non-deterministic.")]),t._v(" "),n("li",[n("code",[t._v("GasWanted (int64)")]),t._v(": Amount of gas requested for transaction.")]),t._v(" "),n("li",[n("code",[t._v("GasUsed (int64)")]),t._v(": Amount of gas consumed by transaction.")]),t._v(" "),n("li",[n("code",[t._v("Tags ([]cmn.KVPair)")]),t._v(": Key-Value tags for filtering and indexing\ntransactions (eg. by account).")]),t._v(" "),n("li",[n("code",[t._v("Codespace (string)")]),t._v(": Namespace for the "),n("code",[t._v("Code")]),t._v(".")])])]),t._v(" "),n("li",[n("strong",[t._v("Usage")]),t._v(":\n"),n("ul",[n("li",[t._v("Technically optional - not involved in processing blocks.")]),t._v(" "),n("li",[t._v("Guardian of the mempool: every node runs CheckTx before letting a\ntransaction into its local mempool.")]),t._v(" "),n("li",[t._v("The transaction may come from an external user or another node")]),t._v(" "),n("li",[t._v("CheckTx need not execute the transaction in full, but rather a light-weight\nyet stateful validation, like checking signatures and account balances, but\nnot running code in a virtual machine.")]),t._v(" "),n("li",[t._v("Transactions where "),n("code",[t._v("ResponseCheckTx.Code != 0")]),t._v(" will be rejected - they will not be broadcast to\nother nodes or included in a proposal block.")]),t._v(" "),n("li",[t._v("Tendermint attributes no other value to the response code")])])])]),t._v(" "),n("h3",{attrs:{id:"delivertx"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#delivertx"}}),t._v(" DeliverTx")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Request")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Tx ([]byte)")]),t._v(": The request transaction bytes.")])])]),t._v(" "),n("li",[n("strong",[t._v("Response")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Code (uint32)")]),t._v(": Response code.")]),t._v(" "),n("li",[n("code",[t._v("Data ([]byte)")]),t._v(": Result bytes, if any.")]),t._v(" "),n("li",[n("code",[t._v("Log (string)")]),t._v(": The output of the application's logger. May\nbe non-deterministic.")]),t._v(" "),n("li",[n("code",[t._v("Info (string)")]),t._v(": Additional information. May\nbe non-deterministic.")]),t._v(" "),n("li",[n("code",[t._v("GasWanted (int64)")]),t._v(": Amount of gas requested for transaction.")]),t._v(" "),n("li",[n("code",[t._v("GasUsed (int64)")]),t._v(": Amount of gas consumed by transaction.")]),t._v(" "),n("li",[n("code",[t._v("Tags ([]cmn.KVPair)")]),t._v(": Key-Value tags for filtering and indexing\ntransactions (eg. by account).")]),t._v(" "),n("li",[n("code",[t._v("Codespace (string)")]),t._v(": Namespace for the "),n("code",[t._v("Code")]),t._v(".")])])]),t._v(" "),n("li",[n("strong",[t._v("Usage")]),t._v(":\n"),n("ul",[n("li",[t._v("The workhorse of the application - non-optional.")]),t._v(" "),n("li",[t._v("Execute the transaction in full.")]),t._v(" "),n("li",[n("code",[t._v("ResponseDeliverTx.Code == 0")]),t._v(" only if the transaction is fully valid.")])])])]),t._v(" "),n("h3",{attrs:{id:"endblock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#endblock"}}),t._v(" EndBlock")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Request")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Height (int64)")]),t._v(": Height of the block just executed.")])])]),t._v(" "),n("li",[n("strong",[t._v("Response")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("ValidatorUpdates ([]ValidatorUpdate)")]),t._v(": Changes to validator set (set\nvoting power to 0 to remove).")]),t._v(" "),n("li",[n("code",[t._v("ConsensusParamUpdates (ConsensusParams)")]),t._v(": Changes to\nconsensus-critical time, size, and other parameters.")]),t._v(" "),n("li",[n("code",[t._v("Tags ([]cmn.KVPair)")]),t._v(": Key-Value tags for filtering and indexing")])])]),t._v(" "),n("li",[n("strong",[t._v("Usage")]),t._v(":\n"),n("ul",[n("li",[t._v("Signals the end of a block.")]),t._v(" "),n("li",[t._v("Called after all transactions, prior to each Commit.")]),t._v(" "),n("li",[t._v("Validator updates returned by block "),n("code",[t._v("H")]),t._v(" impact blocks "),n("code",[t._v("H+1")]),t._v(", "),n("code",[t._v("H+2")]),t._v(", and\n"),n("code",[t._v("H+3")]),t._v(", but only effects changes on the validator set of "),n("code",[t._v("H+2")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("H+1")]),t._v(": NextValidatorsHash")]),t._v(" "),n("li",[n("code",[t._v("H+2")]),t._v(": ValidatorsHash (and thus the validator set)")]),t._v(" "),n("li",[n("code",[t._v("H+3")]),t._v(": LastCommitInfo (ie. the last validator set)")])])]),t._v(" "),n("li",[t._v("Consensus params returned for block "),n("code",[t._v("H")]),t._v(" apply for block "),n("code",[t._v("H+1")])])])])]),t._v(" "),n("h3",{attrs:{id:"commit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#commit"}}),t._v(" Commit")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Response")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Data ([]byte)")]),t._v(": The Merkle root hash of the application state")])])]),t._v(" "),n("li",[n("strong",[t._v("Usage")]),t._v(":\n"),n("ul",[n("li",[t._v("Persist the application state.")]),t._v(" "),n("li",[t._v("Return an (optional) Merkle root hash of the application state")]),t._v(" "),n("li",[n("code",[t._v("ResponseCommit.Data")]),t._v(" is included as the "),n("code",[t._v("Header.AppHash")]),t._v(" in the next block\n"),n("ul",[n("li",[t._v("it may be empty")])])]),t._v(" "),n("li",[t._v("Later calls to "),n("code",[t._v("Query")]),t._v(" can return proofs about the application state anchored\nin this Merkle root hash")]),t._v(" "),n("li",[t._v("Note developers can return whatever they want here (could be nothing, or a\nconstant string, etc.), so long as it is deterministic - it must not be a\nfunction of anything that did not come from the\nBeginBlock/DeliverTx/EndBlock methods.")])])])]),t._v(" "),n("h2",{attrs:{id:"data-types"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#data-types"}}),t._v(" Data Types")]),t._v(" "),n("h3",{attrs:{id:"header"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#header"}}),t._v(" Header")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Fields")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Version (Version)")]),t._v(": Version of the blockchain and the application")]),t._v(" "),n("li",[n("code",[t._v("ChainID (string)")]),t._v(": ID of the blockchain")]),t._v(" "),n("li",[n("code",[t._v("Height (int64)")]),t._v(": Height of the block in the chain")]),t._v(" "),n("li",[n("code",[t._v("Time (google.protobuf.Timestamp)")]),t._v(": Time of the previous block.\nFor heights > 1, it's the weighted median of the timestamps of the valid\nvotes in the block.LastCommit.\nFor height == 1, it's genesis time.")]),t._v(" "),n("li",[n("code",[t._v("NumTxs (int32)")]),t._v(": Number of transactions in the block")]),t._v(" "),n("li",[n("code",[t._v("TotalTxs (int64)")]),t._v(": Total number of transactions in the blockchain until\nnow")]),t._v(" "),n("li",[n("code",[t._v("LastBlockID (BlockID)")]),t._v(": Hash of the previous (parent) block")]),t._v(" "),n("li",[n("code",[t._v("LastCommitHash ([]byte)")]),t._v(": Hash of the previous block's commit")]),t._v(" "),n("li",[n("code",[t._v("ValidatorsHash ([]byte)")]),t._v(": Hash of the validator set for this block")]),t._v(" "),n("li",[n("code",[t._v("NextValidatorsHash ([]byte)")]),t._v(": Hash of the validator set for the next block")]),t._v(" "),n("li",[n("code",[t._v("ConsensusHash ([]byte)")]),t._v(": Hash of the consensus parameters for this block")]),t._v(" "),n("li",[n("code",[t._v("AppHash ([]byte)")]),t._v(": Data returned by the last call to "),n("code",[t._v("Commit")]),t._v(" - typically the\nMerkle root of the application state after executing the previous block's\ntransactions")]),t._v(" "),n("li",[n("code",[t._v("LastResultsHash ([]byte)")]),t._v(": Hash of the ABCI results returned by the last block")]),t._v(" "),n("li",[n("code",[t._v("EvidenceHash ([]byte)")]),t._v(": Hash of the evidence included in this block")]),t._v(" "),n("li",[n("code",[t._v("ProposerAddress ([]byte)")]),t._v(": Original proposer for the block")])])]),t._v(" "),n("li",[n("strong",[t._v("Usage")]),t._v(":\n"),n("ul",[n("li",[t._v("Provided in RequestBeginBlock")]),t._v(" "),n("li",[t._v("Provides important context about the current state of the blockchain -\nespecially height and time.")]),t._v(" "),n("li",[t._v("Provides the proposer of the current block, for use in proposer-based\nreward mechanisms.")])])])]),t._v(" "),n("h3",{attrs:{id:"version"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#version"}}),t._v(" Version")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Fields")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Block (uint64)")]),t._v(": Protocol version of the blockchain data structures.")]),t._v(" "),n("li",[n("code",[t._v("App (uint64)")]),t._v(": Protocol version of the application.")])])]),t._v(" "),n("li",[n("strong",[t._v("Usage")]),t._v(":\n"),n("ul",[n("li",[t._v("Block version should be static in the life of a blockchain.")]),t._v(" "),n("li",[t._v("App version may be updated over time by the application.")])])])]),t._v(" "),n("h3",{attrs:{id:"validator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#validator"}}),t._v(" Validator")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Fields")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Address ([]byte)")]),t._v(": Address of the validator (hash of the public key)")]),t._v(" "),n("li",[n("code",[t._v("Power (int64)")]),t._v(": Voting power of the validator")])])]),t._v(" "),n("li",[n("strong",[t._v("Usage")]),t._v(":\n"),n("ul",[n("li",[t._v("Validator identified by address")]),t._v(" "),n("li",[t._v("Used in RequestBeginBlock as part of VoteInfo")]),t._v(" "),n("li",[t._v("Does not include PubKey to avoid sending potentially large quantum pubkeys\nover the ABCI")])])])]),t._v(" "),n("h3",{attrs:{id:"validatorupdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#validatorupdate"}}),t._v(" ValidatorUpdate")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Fields")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("PubKey (PubKey)")]),t._v(": Public key of the validator")]),t._v(" "),n("li",[n("code",[t._v("Power (int64)")]),t._v(": Voting power of the validator")])])]),t._v(" "),n("li",[n("strong",[t._v("Usage")]),t._v(":\n"),n("ul",[n("li",[t._v("Validator identified by PubKey")]),t._v(" "),n("li",[t._v("Used to tell Tendermint to update the validator set")])])])]),t._v(" "),n("h3",{attrs:{id:"voteinfo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#voteinfo"}}),t._v(" VoteInfo")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Fields")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Validator (Validator)")]),t._v(": A validator")]),t._v(" "),n("li",[n("code",[t._v("SignedLastBlock (bool)")]),t._v(": Indicates whether or not the validator signed\nthe last block")])])]),t._v(" "),n("li",[n("strong",[t._v("Usage")]),t._v(":\n"),n("ul",[n("li",[t._v("Indicates whether a validator signed the last block, allowing for rewards\nbased on validator availability")])])])]),t._v(" "),n("h3",{attrs:{id:"pubkey"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pubkey"}}),t._v(" PubKey")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Fields")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Type (string)")]),t._v(": Type of the public key. A simple string like "),n("code",[t._v('"ed25519"')]),t._v(".\nIn the future, may indicate a serialization algorithm to parse the "),n("code",[t._v("Data")]),t._v(",\nfor instance "),n("code",[t._v('"amino"')]),t._v(".")]),t._v(" "),n("li",[n("code",[t._v("Data ([]byte)")]),t._v(": Public key data. For a simple public key, it's just the\nraw bytes. If the "),n("code",[t._v("Type")]),t._v(" indicates an encoding algorithm, this is the\nencoded public key.")])])]),t._v(" "),n("li",[n("strong",[t._v("Usage")]),t._v(":\n"),n("ul",[n("li",[t._v("A generic and extensible typed public key")])])])]),t._v(" "),n("h3",{attrs:{id:"evidence"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#evidence"}}),t._v(" Evidence")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Fields")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Type (string)")]),t._v(': Type of the evidence. A hierarchical path like\n"duplicate/vote".')]),t._v(" "),n("li",[n("code",[t._v("Validator (Validator")]),t._v(": The offending validator")]),t._v(" "),n("li",[n("code",[t._v("Height (int64)")]),t._v(": Height when the offense was committed")]),t._v(" "),n("li",[n("code",[t._v("Time (google.protobuf.Timestamp)")]),t._v(": Time of the block at height "),n("code",[t._v("Height")]),t._v(".\nIt is the proposer's local time when block was created.")]),t._v(" "),n("li",[n("code",[t._v("TotalVotingPower (int64)")]),t._v(": Total voting power of the validator set at\nheight "),n("code",[t._v("Height")])])])])]),t._v(" "),n("h3",{attrs:{id:"lastcommitinfo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lastcommitinfo"}}),t._v(" LastCommitInfo")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Fields")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Round (int32)")]),t._v(": Commit round.")]),t._v(" "),n("li",[n("code",[t._v("Votes ([]VoteInfo)")]),t._v(": List of validators addresses in the last validator set\nwith their voting power and whether or not they signed a vote.")])])])]),t._v(" "),n("h3",{attrs:{id:"consensusparams"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#consensusparams"}}),t._v(" ConsensusParams")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Fields")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Block (BlockParams)")]),t._v(": Parameters limiting the size of a block and time between consecutive blocks.")]),t._v(" "),n("li",[n("code",[t._v("Evidence (EvidenceParams)")]),t._v(": Parameters limiting the validity of\nevidence of byzantine behaviour.")]),t._v(" "),n("li",[n("code",[t._v("Validator (ValidatorParams)")]),t._v(": Parameters limitng the types of pubkeys validators can use.")])])])]),t._v(" "),n("h3",{attrs:{id:"blockparams"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#blockparams"}}),t._v(" BlockParams")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Fields")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("MaxBytes (int64)")]),t._v(": Max size of a block, in bytes.")]),t._v(" "),n("li",[n("code",[t._v("MaxGas (int64)")]),t._v(": Max sum of "),n("code",[t._v("GasWanted")]),t._v(" in a proposed block.\n"),n("ul",[n("li",[t._v("NOTE: blocks that violate this may be committed if there are Byzantine proposers.\nIt's the application's responsibility to handle this when processing a\nblock!")])])])])])]),t._v(" "),n("h3",{attrs:{id:"evidenceparams"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#evidenceparams"}}),t._v(" EvidenceParams")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Fields")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("MaxAge (int64)")]),t._v(": Max age of evidence, in blocks. Evidence older than this\nis considered stale and ignored.\n"),n("ul",[n("li",[t._v('This should correspond with an app\'s "unbonding period" or other\nsimilar mechanism for handling Nothing-At-Stake attacks.')]),t._v(" "),n("li",[t._v("NOTE: this should change to time (instead of blocks)!")])])])])])]),t._v(" "),n("h3",{attrs:{id:"validatorparams"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#validatorparams"}}),t._v(" ValidatorParams")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Fields")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("PubKeyTypes ([]string)")]),t._v(": List of accepted pubkey types. Uses same\nnaming as "),n("code",[t._v("PubKey.Type")]),t._v(".")])])])]),t._v(" "),n("h3",{attrs:{id:"proof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#proof"}}),t._v(" Proof")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Fields")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Ops ([]ProofOp)")]),t._v(": List of chained Merkle proofs, of possibly different types\n"),n("ul",[n("li",[t._v("The Merkle root of one op is the value being proven in the next op.")]),t._v(" "),n("li",[t._v("The Merkle root of the final op should equal the ultimate root hash being\nverified against.")])])])])])]),t._v(" "),n("h3",{attrs:{id:"proofop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#proofop"}}),t._v(" ProofOp")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Fields")]),t._v(":\n"),n("ul",[n("li",[n("code",[t._v("Type (string)")]),t._v(": Type of Merkle proof and how it's encoded.")]),t._v(" "),n("li",[n("code",[t._v("Key ([]byte)")]),t._v(": Key in the Merkle tree that this proof is for.")]),t._v(" "),n("li",[n("code",[t._v("Data ([]byte)")]),t._v(": Encoded Merkle proof for the key.")])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);
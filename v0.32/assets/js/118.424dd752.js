(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{357:function(t,a,s){"use strict";s.r(a);var e=s(1),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"creating-a-proposal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-proposal"}}),t._v(" Creating a proposal")]),t._v(" "),s("p",[t._v("A block consists of a header, transactions, votes (the commit),\nand a list of evidence of malfeasance (ie. signing conflicting votes).")]),t._v(" "),s("p",[t._v("We include no more than 1/10th of the maximum block size\n("),s("code",[t._v("ConsensusParams.Block.MaxBytes")]),t._v(") of evidence with each block.")]),t._v(" "),s("h2",{attrs:{id:"reaping-transactions-from-the-mempool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reaping-transactions-from-the-mempool"}}),t._v(" Reaping transactions from the mempool")]),t._v(" "),s("p",[t._v("When we reap transactions from the mempool, we calculate maximum data\nsize by subtracting maximum header size ("),s("code",[t._v("MaxHeaderBytes")]),t._v("), the maximum\namino overhead for a block ("),s("code",[t._v("MaxAminoOverheadForBlock")]),t._v("), the size of\nthe last commit (if present) and evidence (if present). While reaping\nwe account for amino overhead for each transaction.")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MaxDataBytes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maxBytes "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" valsCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" evidenceCount "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" maxBytes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n\t\tMaxAminoOverheadForBlock "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n\t\tMaxHeaderBytes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("int64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("valsCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("MaxVoteBytes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("int64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("evidenceCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("MaxEvidenceBytes\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"validating-transactions-in-the-mempool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#validating-transactions-in-the-mempool"}}),t._v(" Validating transactions in the mempool")]),t._v(" "),s("p",[t._v("Before we accept a transaction in the mempool, we check if it's size is no more\nthan {MaxDataSize}. {MaxDataSize} is calculated using the same formula as\nabove, except because the evidence size is unknown at the moment, we subtract\nmaximum evidence size (1/10th of the maximum block size).")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MaxDataBytesUnknownEvidence")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maxBytes "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" valsCount "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" maxBytes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n\t\tMaxAminoOverheadForBlock "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n\t\tMaxHeaderBytes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("int64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("valsCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("MaxVoteBytes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MaxEvidenceBytesPerBlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maxBytes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);
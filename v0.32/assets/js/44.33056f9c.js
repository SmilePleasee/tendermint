(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{407:function(e,t,n){"use strict";n.r(t);var a=n(1),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"using-abci-cli"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#using-abci-cli"}}),e._v(" Using ABCI-CLI")]),e._v(" "),n("p",[e._v("To facilitate testing and debugging of ABCI servers and simple apps, we\nbuilt a CLI, the "),n("code",[e._v("abci-cli")]),e._v(", for sending ABCI messages from the command\nline.")]),e._v(" "),n("h2",{attrs:{id:"install"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#install"}}),e._v(" Install")]),e._v(" "),n("p",[e._v("Make sure you "),n("a",{attrs:{href:"https://golang.org/doc/install",target:"_blank",rel:"noopener noreferrer"}},[e._v("have Go installed"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v("Next, install the "),n("code",[e._v("abci-cli")]),e._v(" tool and example applications:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mkdir -p $GOPATH/src/github.com/tendermint\ncd $GOPATH/src/github.com/tendermint\ngit clone https://github.com/tendermint/tendermint.git\ncd tendermint\nmake tools\nmake install_abci\n")])])]),n("p",[e._v("Now run "),n("code",[e._v("abci-cli")]),e._v(" to see the list of commands:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('Usage:\n  abci-cli [command]\n\nAvailable Commands:\n  batch       Run a batch of abci commands against an application\n  check_tx    Validate a tx\n  commit      Commit the application state and return the Merkle root hash\n  console     Start an interactive abci console for multiple commands\n  counter     ABCI demo example\n  deliver_tx  Deliver a new tx to the application\n  kvstore     ABCI demo example\n  echo        Have the application echo a message\n  help        Help about any command\n  info        Get some info about the application\n  query       Query the application state\n  set_option  Set an options on the application\n\nFlags:\n      --abci string      socket or grpc (default "socket")\n      --address string   address of application socket (default "tcp://127.0.0.1:26658")\n  -h, --help             help for abci-cli\n  -v, --verbose          print the command and results as if it were a console session\n\nUse "abci-cli [command] --help" for more information about a command.\n')])])]),n("h2",{attrs:{id:"kvstore-first-example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#kvstore-first-example"}}),e._v(" KVStore - First Example")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("abci-cli")]),e._v(" tool lets us send ABCI messages to our application, to\nhelp build and debug them.")]),e._v(" "),n("p",[e._v("The most important messages are "),n("code",[e._v("deliver_tx")]),e._v(", "),n("code",[e._v("check_tx")]),e._v(", and "),n("code",[e._v("commit")]),e._v(",\nbut there are others for convenience, configuration, and information\npurposes.")]),e._v(" "),n("p",[e._v("We'll start a kvstore application, which was installed at the same time\nas "),n("code",[e._v("abci-cli")]),e._v(" above. The kvstore just stores transactions in a merkle\ntree.")]),e._v(" "),n("p",[e._v("Its code can be found\n"),n("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/master/abci/cmd/abci-cli/abci-cli.go",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),e._v("\nand looks like:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('func cmdKVStore(cmd *cobra.Command, args []string) error {\n    logger := log.NewTMLogger(log.NewSyncWriter(os.Stdout))\n\n    // Create the application - in memory or persisted to disk\n    var app types.Application\n    if flagPersist == "" {\n        app = kvstore.NewKVStoreApplication()\n    } else {\n        app = kvstore.NewPersistentKVStoreApplication(flagPersist)\n        app.(*kvstore.PersistentKVStoreApplication).SetLogger(logger.With("module", "kvstore"))\n    }\n\n    // Start the listener\n    srv, err := server.NewServer(flagAddrD, flagAbci, app)\n    if err != nil {\n        return err\n    }\n    srv.SetLogger(logger.With("module", "abci-server"))\n    if err := srv.Start(); err != nil {\n        return err\n    }\n\n    // Stop upon receiving SIGTERM or CTRL-C.\n    cmn.TrapSignal(logger, func() {\n        // Cleanup\n        srv.Stop()\n    })\n\n    // Run forever.\n    select {}\n}\n')])])]),n("p",[e._v("Start by running:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("abci-cli kvstore\n")])])]),n("p",[e._v("And in another terminal, run")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("abci-cli echo hello\nabci-cli info\n")])])]),n("p",[e._v("You'll see something like:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("-> data: hello\n-> data.hex: 68656C6C6F\n")])])]),n("p",[e._v("and:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('-> data: {"size":0}\n-> data.hex: 7B2273697A65223A307D\n')])])]),n("p",[e._v("An ABCI application must provide two things:")]),e._v(" "),n("ul",[n("li",[e._v("a socket server")]),e._v(" "),n("li",[e._v("a handler for ABCI messages")])]),e._v(" "),n("p",[e._v("When we run the "),n("code",[e._v("abci-cli")]),e._v(" tool we open a new connection to the\napplication's socket server, send the given ABCI message, and wait for a\nresponse.")]),e._v(" "),n("p",[e._v("The server may be generic for a particular language, and we provide a\n"),n("a",{attrs:{href:"https://github.com/tendermint/tendermint/tree/master/abci/server",target:"_blank",rel:"noopener noreferrer"}},[e._v("reference implementation in\nGolang"),n("OutboundLink")],1),e._v(". See the\n"),n("router-link",{attrs:{to:"/app-dev/ecosystem.html"}},[e._v("list of other ABCI implementations")]),e._v(" for servers in\nother languages.")],1),e._v(" "),n("p",[e._v("The handler is specific to the application, and may be arbitrary, so\nlong as it is deterministic and conforms to the ABCI interface\nspecification.")]),e._v(" "),n("p",[e._v("So when we run "),n("code",[e._v("abci-cli info")]),e._v(", we open a new connection to the ABCI\nserver, which calls the "),n("code",[e._v("Info()")]),e._v(" method on the application, which tells\nus the number of transactions in our Merkle tree.")]),e._v(" "),n("p",[e._v("Now, since every command opens a new connection, we provide the\n"),n("code",[e._v("abci-cli console")]),e._v(" and "),n("code",[e._v("abci-cli batch")]),e._v(" commands, to allow multiple ABCI\nmessages to be sent over a single connection.")]),e._v(" "),n("p",[e._v("Running "),n("code",[e._v("abci-cli console")]),e._v(" should drop you in an interactive console for\nspeaking ABCI messages to your application.")]),e._v(" "),n("p",[e._v("Try running these commands:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('> echo hello\n-> code: OK\n-> data: hello\n-> data.hex: 0x68656C6C6F\n\n> info\n-> code: OK\n-> data: {"size":0}\n-> data.hex: 0x7B2273697A65223A307D\n\n> commit\n-> code: OK\n-> data.hex: 0x0000000000000000\n\n> deliver_tx "abc"\n-> code: OK\n\n> info\n-> code: OK\n-> data: {"size":1}\n-> data.hex: 0x7B2273697A65223A317D\n\n> commit\n-> code: OK\n-> data.hex: 0x0200000000000000\n\n> query "abc"\n-> code: OK\n-> log: exists\n-> height: 0\n-> value: abc\n-> value.hex: 616263\n\n> deliver_tx "def=xyz"\n-> code: OK\n\n> commit\n-> code: OK\n-> data.hex: 0x0400000000000000\n\n> query "def"\n-> code: OK\n-> log: exists\n-> height: 0\n-> value: xyz\n-> value.hex: 78797A\n')])])]),n("p",[e._v("Note that if we do "),n("code",[e._v('deliver_tx "abc"')]),e._v(" it will store "),n("code",[e._v("(abc, abc)")]),e._v(", but if\nwe do "),n("code",[e._v('deliver_tx "abc=efg"')]),e._v(" it will store "),n("code",[e._v("(abc, efg)")]),e._v(".")]),e._v(" "),n("p",[e._v("Similarly, you could put the commands in a file and run\n"),n("code",[e._v("abci-cli --verbose batch < myfile")]),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"counter-another-example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#counter-another-example"}}),e._v(" Counter - Another Example")]),e._v(" "),n("p",[e._v("Now that we've got the hang of it, let's try another application, the\n\"counter\" app.")]),e._v(" "),n("p",[e._v("Like the kvstore app, its code can be found\n"),n("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/master/abci/cmd/abci-cli/abci-cli.go",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),e._v("\nand looks like:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('func cmdCounter(cmd *cobra.Command, args []string) error {\n\n    app := counter.NewCounterApplication(flagSerial)\n\n    logger := log.NewTMLogger(log.NewSyncWriter(os.Stdout))\n\n    // Start the listener\n    srv, err := server.NewServer(flagAddrC, flagAbci, app)\n    if err != nil {\n        return err\n    }\n    srv.SetLogger(logger.With("module", "abci-server"))\n    if err := srv.Start(); err != nil {\n        return err\n    }\n\n    // Stop upon receiving SIGTERM or CTRL-C.\n    cmn.TrapSignal(logger, func() {\n        // Cleanup\n        srv.Stop()\n    })\n\n    // Run forever.\n    select {}\n}\n')])])]),n("p",[e._v("The counter app doesn't use a Merkle tree, it just counts how many times\nwe've sent a transaction, asked for a hash, or committed the state. The\nresult of "),n("code",[e._v("commit")]),e._v(" is just the number of transactions sent.")]),e._v(" "),n("p",[e._v("This application has two modes: "),n("code",[e._v("serial=off")]),e._v(" and "),n("code",[e._v("serial=on")]),e._v(".")]),e._v(" "),n("p",[e._v("When "),n("code",[e._v("serial=on")]),e._v(", transactions must be a big-endian encoded incrementing\ninteger, starting at 0.")]),e._v(" "),n("p",[e._v("If "),n("code",[e._v("serial=off")]),e._v(", there are no restrictions on transactions.")]),e._v(" "),n("p",[e._v("We can toggle the value of "),n("code",[e._v("serial")]),e._v(" using the "),n("code",[e._v("set_option")]),e._v(" ABCI message.")]),e._v(" "),n("p",[e._v("When "),n("code",[e._v("serial=on")]),e._v(", some transactions are invalid. In a live blockchain,\ntransactions collect in memory before they are committed into blocks. To\navoid wasting resources on invalid transactions, ABCI provides the\n"),n("code",[e._v("check_tx")]),e._v(" message, which application developers can use to accept or\nreject transactions, before they are stored in memory or gossipped to\nother peers.")]),e._v(" "),n("p",[e._v("In this instance of the counter app, "),n("code",[e._v("check_tx")]),e._v(" only allows transactions\nwhose integer is greater than the last committed one.")]),e._v(" "),n("p",[e._v("Let's kill the console and the kvstore application, and start the\ncounter app:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("abci-cli counter\n")])])]),n("p",[e._v("In another window, start the "),n("code",[e._v("abci-cli console")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('> set_option serial on\n-> code: OK\n-> log: OK (SetOption doesn\'t return anything.)\n\n> check_tx 0x00\n-> code: OK\n\n> check_tx 0xff\n-> code: OK\n\n> deliver_tx 0x00\n-> code: OK\n\n> check_tx 0x00\n-> code: BadNonce\n-> log: Invalid nonce. Expected >= 1, got 0\n\n> deliver_tx 0x01\n-> code: OK\n\n> deliver_tx 0x04\n-> code: BadNonce\n-> log: Invalid nonce. Expected 2, got 4\n\n> info\n-> code: OK\n-> data: {"hashes":0,"txs":2}\n-> data.hex: 0x7B22686173686573223A302C22747873223A327D\n')])])]),n("p",[e._v("This is a very simple application, but between "),n("code",[e._v("counter")]),e._v(" and "),n("code",[e._v("kvstore")]),e._v(",\nits easy to see how you can build out arbitrary application states on\ntop of the ABCI. "),n("a",{attrs:{href:"https://github.com/hyperledger/burrow",target:"_blank",rel:"noopener noreferrer"}},[e._v("Hyperledger's\nBurrow"),n("OutboundLink")],1),e._v(" also runs atop ABCI,\nbringing with it Ethereum-like accounts, the Ethereum virtual-machine,\nMonax's permissioning scheme, and native contracts extensions.")]),e._v(" "),n("p",[e._v("But the ultimate flexibility comes from being able to write the\napplication easily in any language.")]),e._v(" "),n("p",[e._v("We have implemented the counter in a number of languages "),n("a",{attrs:{href:"https://github.com/tendermint/tendermint/tree/master/abci/example",target:"_blank",rel:"noopener noreferrer"}},[e._v("see the\nexample directory"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v("To run the Node.js version, fist download & install "),n("a",{attrs:{href:"https://github.com/tendermint/js-abci",target:"_blank",rel:"noopener noreferrer"}},[e._v("the Javascript ABCI server"),n("OutboundLink")],1),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("git clone https://github.com/tendermint/js-abci.git\ncd js-abci\nnpm install abci\n")])])]),n("p",[e._v("Now you can start the app:")]),e._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[e._v("node example/counter.js\n")])])]),n("p",[e._v("(you'll have to kill the other counter application process). In another\nwindow, run the console and those previous ABCI commands. You should get\nthe same results as for the Go version.")]),e._v(" "),n("h2",{attrs:{id:"bounties"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bounties"}}),e._v(" Bounties")]),e._v(" "),n("p",[e._v("Want to write the counter app in your favorite language?! We'd be happy\nto add you to our "),n("a",{attrs:{href:"https://tendermint.com/ecosystem",target:"_blank",rel:"noopener noreferrer"}},[e._v("ecosystem"),n("OutboundLink")],1),e._v("! We're\nalso offering "),n("a",{attrs:{href:"https://hackerone.com/tendermint/",target:"_blank",rel:"noopener noreferrer"}},[e._v("bounties"),n("OutboundLink")],1),e._v(" for\nimplementations in new languages!")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("abci-cli")]),e._v(" is designed strictly for testing and debugging. In a real\ndeployment, the role of sending messages is taken by Tendermint, which\nconnects to the app using three separate connections, each with its own\npattern of messages.")]),e._v(" "),n("p",[e._v("For more information, see the "),n("router-link",{attrs:{to:"/app-dev/app-development.html"}},[e._v("application developers\nguide")]),e._v(". For examples of running an ABCI app with\nTendermint, see the "),n("router-link",{attrs:{to:"/app-dev/getting-started.html"}},[e._v("getting started guide")]),e._v(".\nNext is the ABCI specification.")],1)])}),[],!1,null,null,null);t.default=o.exports}}]);
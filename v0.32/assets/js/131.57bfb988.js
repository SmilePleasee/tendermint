(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{425:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"blockchain-reactor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blockchain-reactor"}}),t._v(" Blockchain Reactor")]),t._v(" "),a("p",[t._v("The Blockchain Reactor's high level responsibility is to enable peers who are\nfar behind the current state of the consensus to quickly catch up by downloading\nmany blocks in parallel, verifying their commits, and executing them against the\nABCI application.")]),t._v(" "),a("p",[t._v('Tendermint full nodes run the Blockchain Reactor as a service to provide blocks\nto new nodes. New nodes run the Blockchain Reactor in "fast_sync" mode,\nwhere they actively make requests for more blocks until they sync up.\nOnce caught up, "fast_sync" mode is disabled and the node switches to\nusing (and turns on) the Consensus Reactor.')]),t._v(" "),a("h2",{attrs:{id:"message-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#message-types"}}),t._v(" Message Types")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    msgTypeBlockRequest    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    msgTypeBlockResponse   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    msgTypeNoBlockResponse "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    msgTypeStatusResponse  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    msgTypeStatusRequest   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x21")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" bcBlockRequestMessage "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Height "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" bcNoBlockResponseMessage "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Height "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" bcBlockResponseMessage "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Block Block\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" bcStatusRequestMessage "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Height "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" bcStatusResponseMessage "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Height "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"architecture-and-algorithm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#architecture-and-algorithm"}}),t._v(" Architecture and algorithm")]),t._v(" "),a("p",[t._v("The Blockchain reactor is organised as a set of concurrent tasks:")]),t._v(" "),a("ul",[a("li",[t._v("Receive routine of Blockchain Reactor")]),t._v(" "),a("li",[t._v("Task for creating Requesters")]),t._v(" "),a("li",[t._v("Set of Requesters tasks and - Controller task.")])]),t._v(" "),a("p",[a("img",{attrs:{src:"img/bc-reactor.png",alt:"Blockchain Reactor Architecture Diagram"}})]),t._v(" "),a("h3",{attrs:{id:"data-structures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-structures"}}),t._v(" Data structures")]),t._v(" "),a("p",[t._v("These are the core data structures necessarily to provide the Blockchain Reactor logic.")]),t._v(" "),a("p",[t._v("Requester data structure is used to track assignment of request for "),a("code",[t._v("block")]),t._v(" at position "),a("code",[t._v("height")]),t._v(" to a peer with id equals to "),a("code",[t._v("peerID")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Requester "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  mtx          Mutex\n  block        Block\n  height       "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n \n peerID       p2p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID\n  redoChannel  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("chan")]),t._v(" p2p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//redo may send multi-time; peerId is used to identify repeat")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Pool is a core data structure that stores last executed block ("),a("code",[t._v("height")]),t._v("), assignment of requests to peers ("),a("code",[t._v("requesters")]),t._v("), current height for each peer and number of pending requests for each peer ("),a("code",[t._v("peers")]),t._v("), maximum peer height, etc.")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Pool "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  mtx                Mutex\n  requesters         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Requester\n  height             "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n  peers              "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p2p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Peer\n  maxPeerHeight      "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n  numPending         "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v("\n  store              BlockStore\n  requestsChannel    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("chan")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" BlockRequest\n  errorsChannel      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("chan")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" peerError\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Peer data structure stores for each peer current "),a("code",[t._v("height")]),t._v(" and number of pending requests sent to the peer ("),a("code",[t._v("numPending")]),t._v("), etc.")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Peer "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id           p2p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID\n  height       "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n  numPending   "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v("\n  timeout      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Timer\n  didTimeout   "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("BlockRequest is internal data structure used to denote current mapping of request for a block at some "),a("code",[t._v("height")]),t._v(" to a peer ("),a("code",[t._v("PeerID")]),t._v(").")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" BlockRequest "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Height "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n  PeerID p2p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"receive-routine-of-blockchain-reactor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#receive-routine-of-blockchain-reactor"}}),t._v(" Receive routine of Blockchain Reactor")]),t._v(" "),a("p",[t._v("It is executed upon message reception on the BlockchainChannel inside p2p receive routine. There is a separate p2p receive routine (and therefore receive routine of the Blockchain Reactor) executed for each peer. Note that try to send will not block (returns immediately) if outgoing buffer is full.")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleMsg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    upon receiving bcBlockRequestMessage m from peer p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      block "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" load block "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" height m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Height from pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("store\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" block "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" then\n        try to send "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BlockResponseMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("block"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" to p\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n        try to send "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bcNoBlockResponseMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" to p\n\n    upon receiving bcBlockResponseMessage m from peer p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      requester "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("requesters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" requester "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" then\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"peer sent us a block we didn\'t expect"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" requester"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("block "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" and requester"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("peerID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" p then\n        requester"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("block "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m\n        pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("numPending "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// atomic decrement")]),t._v("\n        peer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("peers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" peer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" then\n          peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("numPending"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("numPending "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" then\n            peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Stop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NOTE: we don't send Quit signal to the corresponding requester task!")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n          trigger peer timeout to expire after peerTimeout\n      pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n    upon receiving bcStatusRequestMessage m from peer p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      try to send "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bcStatusResponseMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    upon receiving bcStatusResponseMessage m from peer p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      peer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("peers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" peer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" then\n        peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n        peer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" create "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("new")]),t._v(" Peer data structure with id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p and height "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Height\n        pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("peers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" peer\n\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Height "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxPeerHeight then\n        pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxPeerHeight "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Height\n      pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  send "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" message to pool "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" channel\n  peer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("peers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("didTimeout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("h3",{attrs:{id:"requester-tasks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requester-tasks"}}),t._v(" Requester tasks")]),t._v(" "),a("p",[t._v("Requester task is responsible for fetching a single block at position "),a("code",[t._v("height")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetchBlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  while "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" do "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    peerID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n    block "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n    peer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pickAvailablePeer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    peerID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id\n\n    enqueue "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BlockRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" peerID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" to pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("requestsChannel\n    redo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    while "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("redo do\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        upon receiving Quit message do\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n        upon receiving redo message with id on redoChannel do\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" peerID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("numPending"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n            redo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n            mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UnLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pickAvailablePeer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  selectedPeer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n  while selectedPeer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" do\n    pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" each peer in pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("peers do\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("didTimeout and peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("numPending "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" maxPendingRequestsPerPeer and peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" height then\n        peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("numPending"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n        selectedPeer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" peer\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n    pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" selectedPeer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" then\n      sleep requestIntervalMS\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" selectedPeer\n")])])]),a("p",[t._v("sleep for requestIntervalMS")]),t._v(" "),a("h3",{attrs:{id:"task-for-creating-requesters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#task-for-creating-requesters"}}),t._v(" Task for creating Requesters")]),t._v(" "),a("p",[t._v("This task is responsible for continuously creating and starting Requester tasks.")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createRequesters")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  while "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" do\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isRunning then "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("numPending "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" maxPendingRequests or "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("requesters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" maxTotalRequesters then\n      pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      nextHeight "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("requesters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      requester "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" create "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("new")]),t._v(" requester "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" height nextHeight\n      pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("requesters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nextHeight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" requester\n      pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("numPending "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// atomic increment")]),t._v("\n      start requester task\n      pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n      sleep requestIntervalMS\n      pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" each peer in pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("peers do\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("didTimeout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("numPending "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("curRate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" minRecvRate then\n          send "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" on pool "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" channel\n          peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("didTimeout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("didTimeout then\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" each requester in pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("requesters do\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" requester"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPeerID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" peer then\n              enqueue msg on requestor's redoChannel\n          "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("peers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" peerID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"main-blockchain-reactor-controller-task"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#main-blockchain-reactor-controller-task"}}),t._v(" Main blockchain reactor controller task")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  create trySyncTicker with interval trySyncIntervalMS\n  create statusUpdateTicker with interval statusUpdateIntervalSeconds\n  create switchToConsensusTicker with interval switchToConsensusIntervalSeconds\n\n  while "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" do\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t  upon receiving "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BlockRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" on pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("requestsChannel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t    try to send "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bcBlockRequestMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" to Peer\n\n\t  upon receiving "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("peer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" on errorsChannel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t    stop peer "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v("\n\n\t  upon receiving message on statusUpdateTickerChannel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t    broadcast "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bcStatusRequestMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bcR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// message sent in a separate routine")]),t._v("\n\n\t  upon receiving message on switchToConsensusTickerChannel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t    pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t    receivedBlockOrTimedOut "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" Seconds\n\t    ourChainIsLongestAmongPeers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxPeerHeight "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxPeerHeight\n\t    haveSomePeers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" size of pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("peers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\t    pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" haveSomePeers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" receivedBlockOrTimedOut "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ourChainIsLongestAmongPeers then\n\t      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" to consensus mode\n\n          upon receiving message on trySyncTickerChannel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" do\n              pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n              firstBlock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("requesters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("block\n              secondBlock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("requesters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("block\n              "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" firstBlock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" or secondBlock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" then "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n              pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n              verify firstBlock using LastCommit from secondBlock\n              "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" verification failed\n                pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                peerID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("requesters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("peerID\n                "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("redoRequestsForPeer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("peerId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("peers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" peerID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                stop peer peerID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v("\n                pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("requesters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                save firstBlock to store\n                pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n                execute firstBlock\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("redoRequestsForPeer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" peerId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" each requester in pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("requesters do\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" requester"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPeerID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" peerID\n  \t  enqueue msg on redoChannel "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" requester\n")])])]),a("h2",{attrs:{id:"channels"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channels"}}),t._v(" Channels")]),t._v(" "),a("p",[t._v("Defines "),a("code",[t._v("maxMsgSize")]),t._v(" for the maximum size of incoming messages,\n"),a("code",[t._v("SendQueueCapacity")]),t._v(" and "),a("code",[t._v("RecvBufferCapacity")]),t._v(" for maximum sending and\nreceiving buffers respectively. These are supposed to prevent amplification\nattacks by setting up the upper limit on how much data we can receive & send to\na peer.")]),t._v(" "),a("p",[t._v("Sending incorrectly encoded data will result in stopping the peer.")])])}),[],!1,null,null,null);s.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{301:function(t,e,n){"use strict";n.r(e);var s=n(1),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"adr-012-peertransport"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#adr-012-peertransport"}}),t._v(" ADR 012: PeerTransport")]),t._v(" "),n("h2",{attrs:{id:"context"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#context"}}),t._v(" Context")]),t._v(" "),n("p",[t._v("One of the more apparent problems with the current architecture in the p2p\npackage is that there is no clear separation of concerns between different\ncomponents. Most notably the "),n("code",[t._v("Switch")]),t._v(" is currently doing physical connection\nhandling. An artifact is the dependency of the Switch on\n"),n("code",[t._v("[config.P2PConfig")]),t._v("](https://github.com/tendermint/tendermint/blob/05a76fb517f50da27b4bfcdc7b4cf185fc61eff6/config/config.go#L272-L339).")]),t._v(" "),n("p",[t._v("Addresses:")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/tendermint/tendermint/issues/2046",target:"_blank",rel:"noopener noreferrer"}},[t._v("#2046"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/tendermint/tendermint/issues/2047",target:"_blank",rel:"noopener noreferrer"}},[t._v("#2047"),n("OutboundLink")],1)])]),t._v(" "),n("p",[t._v("First iteraton in "),n("a",{attrs:{href:"https://github.com/tendermint/tendermint/issues/2067",target:"_blank",rel:"noopener noreferrer"}},[t._v("#2067"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"decision"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#decision"}}),t._v(" Decision")]),t._v(" "),n("p",[t._v("Transport concerns will be handled by a new component ("),n("code",[t._v("PeerTransport")]),t._v(") which\nwill provide Peers at its boundary to the caller. In turn "),n("code",[t._v("Switch")]),t._v(" will use\nthis new component accept new "),n("code",[t._v("Peer")]),t._v("s and dial them based on "),n("code",[t._v("NetAddress")]),t._v(".")]),t._v(" "),n("h3",{attrs:{id:"peertransport"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#peertransport"}}),t._v(" PeerTransport")]),t._v(" "),n("p",[t._v("Responsible for emitting and connecting to Peers. The implementation of "),n("code",[t._v("Peer")]),t._v("\nis left to the transport, which implies that the chosen transport dictates the\ncharacteristics of the implementation handed back to the "),n("code",[t._v("Switch")]),t._v(". Each\ntransport implementation is responsible to filter establishing peers specific\nto its domain, for the default multiplexed implementation the following will\napply:")]),t._v(" "),n("ul",[n("li",[t._v("connections from our own node")]),t._v(" "),n("li",[t._v("handshake fails")]),t._v(" "),n("li",[t._v("upgrade to secret connection fails")]),t._v(" "),n("li",[t._v("prevent duplicate ip")]),t._v(" "),n("li",[t._v("prevent duplicate id")]),t._v(" "),n("li",[t._v("nodeinfo incompatibility")])]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// PeerTransport proxies incoming and outgoing peer connections.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" PeerTransport "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Accept returns a newly connected Peer.")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Accept")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Peer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Dial connects to a Peer.")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Dial")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NetAddress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Peer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// EXAMPLE OF DEFAULT IMPLEMENTATION")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// multiplexTransport accepts tcp connections and upgrades to multiplexted")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// peers.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" multiplexTransport "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tlistener net"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Listener\n\n\tacceptc "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("chan")]),t._v(" accept\n\tclosec  "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("chan")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tlistenc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("chan")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\tdialTimeout      time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Duration\n\thandshakeTimeout time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Duration\n\tnodeAddr         NetAddress\n\tnodeInfo         NodeInfo\n\tnodeKey          NodeKey\n\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO(xla): Remove when MConnection is refactored into mPeer.")]),t._v("\n\tmConfig conn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MConnConfig\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" PeerTransport "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("multiplexTransport"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NewMTransport returns network connected multiplexed peers.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewMTransport")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tnodeAddr NetAddress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tnodeInfo NodeInfo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tnodeKey NodeKey"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("multiplexTransport\n")])])]),n("h3",{attrs:{id:"switch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#switch"}}),t._v(" Switch")]),t._v(" "),n("p",[t._v("From now the Switch will depend on a fully setup "),n("code",[t._v("PeerTransport")]),t._v(" to\nretrieve/reach out to its peers. As the more low-level concerns are pushed to\nthe transport, we can omit passing the "),n("code",[t._v("config.P2PConfig")]),t._v(" to the Switch.")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewSwitch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("transport PeerTransport"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" opts "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("SwitchOption"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Switch\n")])])]),n("h2",{attrs:{id:"status"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#status"}}),t._v(" Status")]),t._v(" "),n("p",[t._v("In Review.")]),t._v(" "),n("h2",{attrs:{id:"consequences"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#consequences"}}),t._v(" Consequences")]),t._v(" "),n("h3",{attrs:{id:"positive"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#positive"}}),t._v(" Positive")]),t._v(" "),n("ul",[n("li",[t._v("free Switch from transport concerns - simpler implementation")]),t._v(" "),n("li",[t._v("pluggable transport implementation - simpler test setup")]),t._v(" "),n("li",[t._v("remove Switch dependency on P2PConfig - easier to test")])]),t._v(" "),n("h3",{attrs:{id:"negative"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#negative"}}),t._v(" Negative")]),t._v(" "),n("ul",[n("li",[t._v("more setup for tests which depend on Switches")])]),t._v(" "),n("h3",{attrs:{id:"neutral"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#neutral"}}),t._v(" Neutral")]),t._v(" "),n("ul",[n("li",[t._v("multiplexed will be the default implementation")])]),t._v(" "),n("p",[t._v("[0] These guards could be potentially extended to be pluggable much like\nmiddlewares to express different concerns required by differentally configured\nenvironments.")])])}),[],!1,null,null,null);e.default=a.exports}}]);
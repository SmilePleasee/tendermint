(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{315:function(e,t,n){"use strict";n.r(t);var a=n(1),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"adr-024-signbytes-and-validator-types-in-privval"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#adr-024-signbytes-and-validator-types-in-privval"}}),e._v(" ADR 024: SignBytes and validator types in privval")]),e._v(" "),n("h2",{attrs:{id:"context"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#context"}}),e._v(" Context")]),e._v(" "),n("p",[e._v("Currently, the messages exchanged between tendermint and a (potentially remote) signer/validator,\nnamely votes, proposals, and heartbeats, are encoded as a JSON string\n(e.g., via "),n("code",[e._v("Vote.SignBytes(...)")]),e._v(") and then\nsigned . JSON encoding is sub-optimal for both, hardware wallets\nand for usage in ethereum smart contracts. Both is laid down in detail in "),n("a",{attrs:{href:"https://github.com/tendermint/tendermint/issues/1622",target:"_blank",rel:"noopener noreferrer"}},[e._v("issue#1622"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v("Also, there are currently no differences between sign-request and -replies. Also, there is no possibility\nfor a remote signer to include an error code or message in case something went wrong.\nThe messages exchanged between tendermint and a remote signer currently live in\n"),n("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/d419fffe18531317c28c29a292ad7d253f6cafdf/privval/socket.go#L496-L502",target:"_blank",rel:"noopener noreferrer"}},[e._v("privval/socket.go"),n("OutboundLink")],1),e._v(" and encapsulate the corresponding types in "),n("a",{attrs:{href:"https://github.com/tendermint/tendermint/tree/master/types",target:"_blank",rel:"noopener noreferrer"}},[e._v("types"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"decision"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#decision"}}),e._v(" Decision")]),e._v(" "),n("ul",[n("li",[e._v("restructure vote, proposal, and heartbeat such that their encoding is easily parseable by\nhardware devices and smart contracts using a  binary encoding format ("),n("a",{attrs:{href:"https://github.com/tendermint/go-amino/",target:"_blank",rel:"noopener noreferrer"}},[e._v("amino"),n("OutboundLink")],1),e._v(" in this case)")]),e._v(" "),n("li",[e._v("split up the messages exchanged between tendermint and remote signers into requests and\nresponses (see details below)")]),e._v(" "),n("li",[e._v("include an error type in responses")])]),e._v(" "),n("h3",{attrs:{id:"overview"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#overview"}}),e._v(" Overview")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("+--------------+                      +----------------+\n|              |     SignXRequest     |                |\n|Remote signer |<---------------------+  tendermint    |\n| (e.g. KMS)   |                      |                |\n|              +---------------------\x3e|                |\n+--------------+    SignedXReply      +----------------+\n\n\nSignXRequest {\n    x: X\n}\n\nSignedXReply {\n    x: X\n  sig: Signature // []byte\n  err: Error{ \n    code: int\n    desc: string\n  }\n}\n")])])]),n("p",[e._v("TODO: Alternatively, the type "),n("code",[e._v("X")]),e._v(' might directly include the signature. A lot of places expect a vote with a\nsignature and do not necessarily deal with "Replies".\nStill exploring what would work best here.\nThis would look like (exemplified using X = Vote):')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Vote {\n    // all fields besides signature\n}\n\nSignedVote {\n Vote Vote\n Signature []byte\n}\n\nSignVoteRequest {\n   Vote Vote\n}\n\nSignedVoteReply {\n    Vote SignedVote\n    Err  Error\n}\n")])])]),n("p",[n("strong",[e._v("Note:")]),e._v(" There was a related discussion around including a fingerprint of, or, the whole public-key\ninto each sign-request to tell the signer which corresponding private-key to\nuse to sign the message. This is particularly relevant in the context of the KMS\nbut is currently not considered in this ADR.")]),e._v(" "),n("h3",{attrs:{id:"vote"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vote"}}),e._v(" Vote")]),e._v(" "),n("p",[e._v("As explained in "),n("a",{attrs:{href:"https://github.com/tendermint/tendermint/issues/1622",target:"_blank",rel:"noopener noreferrer"}},[e._v("issue#1622"),n("OutboundLink")],1),e._v(" "),n("code",[e._v("Vote")]),e._v(" will be changed to contain the following fields\n(notation in protobuf-like syntax for easy readability):")]),e._v(" "),n("div",{staticClass:"language-proto extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// vanilla protobuf / amino encoded\nmessage Vote {\n    Version       fixed32                      \n    Height        sfixed64       \n    Round         sfixed32\n    VoteType      fixed32\n    Timestamp     Timestamp         // << using protobuf definition\n    BlockID       BlockID           // << as already defined \n    ChainID       string            // at the end because length could vary a lot\n}\n\n// this is an amino registered type; like currently privval.SignVoteMsg: \n// registered with "tendermint/socketpv/SignVoteRequest"\nmessage SignVoteRequest {\n   Vote vote\n}\n\n//  amino registered type\n// registered with "tendermint/socketpv/SignedVoteReply"\nmessage SignedVoteReply { \n   Vote      Vote\n   Signature Signature \n   Err       Error\n}\n\n// we will use this type everywhere below\nmessage Error {\n  Type        uint  // error code\n  Description string  // optional description\n}\n\n')])])]),n("p",[e._v("The "),n("code",[e._v("ChainID")]),e._v(" gets moved into the vote message directly. Previously, it was injected\nusing the "),n("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/d419fffe18531317c28c29a292ad7d253f6cafdf/types/signable.go#L9-L11",target:"_blank",rel:"noopener noreferrer"}},[e._v("Signable"),n("OutboundLink")],1),e._v(" interface method "),n("code",[e._v("SignBytes(chainID string) []byte")]),e._v(". Also, the\nsignature won't be included directly, only in the corresponding "),n("code",[e._v("SignedVoteReply")]),e._v(" message.")]),e._v(" "),n("h3",{attrs:{id:"proposal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#proposal"}}),e._v(" Proposal")]),e._v(" "),n("div",{staticClass:"language-proto extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// vanilla protobuf / amino encoded\nmessage Proposal {                      \n    Height            sfixed64       \n    Round             sfixed32\n    Timestamp         Timestamp         // << using protobuf definition\n    BlockPartsHeader  PartSetHeader     // as already defined\n    POLRound          sfixed32\n    POLBlockID        BlockID           // << as already defined    \n}\n \n// amino registered with "tendermint/socketpv/SignProposalRequest"\nmessage SignProposalRequest {\n   Proposal proposal\n}\n\n// amino registered with "tendermint/socketpv/SignProposalReply"\nmessage SignProposalReply { \n   Prop   Proposal\n   Sig    Signature \n   Err    Error     // as defined above\n}\n')])])]),n("h3",{attrs:{id:"heartbeat"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#heartbeat"}}),e._v(" Heartbeat")]),e._v(" "),n("p",[n("strong",[e._v("TODO")]),e._v(": clarify if heartbeat also needs a fixed offset and update the fields accordingly:")]),e._v(" "),n("div",{staticClass:"language-proto extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('message Heartbeat {\n\tValidatorAddress Address \n\tValidatorIndex   int     \n\tHeight           int64   \n\tRound            int     \n\tSequence         int     \n}\n// amino registered with "tendermint/socketpv/SignHeartbeatRequest"\nmessage SignHeartbeatRequest {\n   Hb Heartbeat\n}\n\n// amino registered with "tendermint/socketpv/SignHeartbeatReply"\nmessage SignHeartbeatReply { \n   Hb     Heartbeat\n   Sig    Signature \n   Err    Error     // as defined above\n}\n\n')])])]),n("h2",{attrs:{id:"pubkey"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pubkey"}}),e._v(" PubKey")]),e._v(" "),n("p",[e._v("TBA -  this needs further thoughts: e.g. what todo like in the case of the KMS which holds\nseveral keys? How does it know with which key to reply?")]),e._v(" "),n("h2",{attrs:{id:"signbytes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#signbytes"}}),e._v(" SignBytes")]),e._v(" "),n("p",[n("code",[e._v("SignBytes")]),e._v(" will not require a "),n("code",[e._v("ChainID")]),e._v(" parameter:")]),e._v(" "),n("div",{staticClass:"language-golang extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type Signable interface {\n\tSignBytes() []byte\n}\n\n")])])]),n("p",[e._v("And the implementation for vote, heartbeat, proposal will look like:")]),e._v(" "),n("div",{staticClass:"language-golang extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// type T is one of vote, sign, proposal\nfunc (tp *T) SignBytes() []byte {\n\tbz, err := cdc.MarshalBinary(tp)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn bz\n}\n")])])]),n("h2",{attrs:{id:"status"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#status"}}),e._v(" Status")]),e._v(" "),n("p",[e._v("DRAFT")]),e._v(" "),n("h2",{attrs:{id:"consequences"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#consequences"}}),e._v(" Consequences")]),e._v(" "),n("h3",{attrs:{id:"positive"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#positive"}}),e._v(" Positive")]),e._v(" "),n("p",[e._v("The most relevant positive effect is that the signing bytes can easily be parsed by a\nhardware module and a smart contract. Besides that:")]),e._v(" "),n("ul",[n("li",[e._v("clearer separation between requests and responses")]),e._v(" "),n("li",[e._v("added error messages enable better error handling")])]),e._v(" "),n("h3",{attrs:{id:"negative"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#negative"}}),e._v(" Negative")]),e._v(" "),n("ul",[n("li",[e._v("relatively huge change / refactoring touching quite some code")]),e._v(" "),n("li",[e._v("lot's of places assume a "),n("code",[e._v("Vote")]),e._v(" with a signature included -> they will need to")]),e._v(" "),n("li",[e._v("need to modify some interfaces")])]),e._v(" "),n("h3",{attrs:{id:"neutral"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#neutral"}}),e._v(" Neutral")]),e._v(" "),n("p",[e._v("not even the swiss are neutral")])])}),[],!1,null,null,null);t.default=r.exports}}]);
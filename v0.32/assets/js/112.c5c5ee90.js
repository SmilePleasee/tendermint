(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{418:function(t,e,s){"use strict";s.r(e);var a=s(1),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#encoding"}}),t._v(" Encoding")]),t._v(" "),s("h2",{attrs:{id:"amino"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#amino"}}),t._v(" Amino")]),t._v(" "),s("p",[t._v("Tendermint uses the proto3 derivative "),s("a",{attrs:{href:"https://github.com/tendermint/go-amino",target:"_blank",rel:"noopener noreferrer"}},[t._v("Amino"),s("OutboundLink")],1),t._v(" for all data structures.\nThink of Amino as an object-oriented proto3 with native JSON support.\nThe goal of the Amino encoding protocol is to bring parity between application\nlogic objects and persistence objects.")]),t._v(" "),s("p",[t._v("Please see the "),s("a",{attrs:{href:"https://github.com/tendermint/go-amino#amino-encoding-for-go",target:"_blank",rel:"noopener noreferrer"}},[t._v("Amino\nspecification"),s("OutboundLink")],1),t._v(" for\nmore details.")]),t._v(" "),s("p",[t._v('Notably, every object that satisfies an interface (eg. a particular kind of p2p message,\nor a particular kind of pubkey) is registered with a global name, the hash of\nwhich is included in the object\'s encoding as the so-called "prefix bytes".')]),t._v(" "),s("p",[t._v("We define the "),s("code",[t._v("func AminoEncode(obj interface{}) []byte")]),t._v(" function to take an\narbitrary object and return the Amino encoded bytes.")]),t._v(" "),s("h2",{attrs:{id:"byte-arrays"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#byte-arrays"}}),t._v(" Byte Arrays")]),t._v(" "),s("p",[t._v("The encoding of a byte array is simply the raw-bytes prefixed with the length of\nthe array as a "),s("code",[t._v("UVarint")]),t._v(" (what proto calls a "),s("code",[t._v("Varint")]),t._v(").")]),t._v(" "),s("p",[t._v("For details on varints, see the "),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding#varints",target:"_blank",rel:"noopener noreferrer"}},[t._v("protobuf\nspec"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("For example, the byte-array "),s("code",[t._v("[0xA, 0xB]")]),t._v(" would be encoded as "),s("code",[t._v("0x020A0B")]),t._v(",\nwhile a byte-array containing 300 entires beginning with "),s("code",[t._v("[0xA, 0xB, ...]")]),t._v(" would\nbe encoded as "),s("code",[t._v("0xAC020A0B...")]),t._v(" where "),s("code",[t._v("0xAC02")]),t._v(" is the UVarint encoding of 300.")]),t._v(" "),s("h2",{attrs:{id:"hashing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashing"}}),t._v(" Hashing")]),t._v(" "),s("p",[t._v("Tendermint uses "),s("code",[t._v("SHA256")]),t._v(" as its hash function.\nObjects are always Amino encoded before being hashed.\nSo "),s("code",[t._v("SHA256(obj)")]),t._v(" is short for "),s("code",[t._v("SHA256(AminoEncode(obj))")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"public-key-cryptography"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-key-cryptography"}}),t._v(" Public Key Cryptography")]),t._v(" "),s("p",[t._v("Tendermint uses Amino to distinguish between different types of private keys,\npublic keys, and signatures. Additionally, for each public key, Tendermint\ndefines an Address function that can be used as a more compact identifier in\nplace of the public key. Here we list the concrete types, their names,\nand prefix bytes for public keys and signatures, as well as the address schemes\nfor each PubKey. Note for brevity we don't\ninclude details of the private keys beyond their type and name, as they can be\nderived the same way as the others using Amino.")]),t._v(" "),s("p",[t._v("All registered objects are encoded by Amino using a 4-byte PrefixBytes that\nuniquely identifies the object and includes information about its underlying\ntype. For details on how PrefixBytes are computed, see the "),s("a",{attrs:{href:"https://github.com/tendermint/go-amino#computing-the-prefix-and-disambiguation-bytes",target:"_blank",rel:"noopener noreferrer"}},[t._v("Amino\nspec"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("In what follows, we provide the type names and prefix bytes directly.\nNotice that when encoding byte-arrays, the length of the byte-array is appended\nto the PrefixBytes. Thus the encoding of a byte array becomes "),s("code",[t._v("<PrefixBytes> <Length> <ByteArray>")]),t._v(". In other words, to encode any type listed below you do not need to be\nfamiliar with amino encoding.\nYou can simply use below table and concatenate Prefix || Length (of raw bytes) || raw bytes\n( while || stands for byte concatenation here).")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Type")]),t._v(" "),s("th",[t._v("Name")]),t._v(" "),s("th",[t._v("Prefix")]),t._v(" "),s("th",[t._v("Length")]),t._v(" "),s("th",[t._v("Notes")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("PubKeyEd25519")]),t._v(" "),s("td",[t._v("tendermint/PubKeyEd25519")]),t._v(" "),s("td",[t._v("0x1624DE64")]),t._v(" "),s("td",[t._v("0x20")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("PubKeySecp256k1")]),t._v(" "),s("td",[t._v("tendermint/PubKeySecp256k1")]),t._v(" "),s("td",[t._v("0xEB5AE987")]),t._v(" "),s("td",[t._v("0x21")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("PrivKeyEd25519")]),t._v(" "),s("td",[t._v("tendermint/PrivKeyEd25519")]),t._v(" "),s("td",[t._v("0xA3288910")]),t._v(" "),s("td",[t._v("0x40")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("PrivKeySecp256k1")]),t._v(" "),s("td",[t._v("tendermint/PrivKeySecp256k1")]),t._v(" "),s("td",[t._v("0xE1B0F79B")]),t._v(" "),s("td",[t._v("0x20")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("PubKeyMultisigThreshold")]),t._v(" "),s("td",[t._v("tendermint/PubKeyMultisigThreshold")]),t._v(" "),s("td",[t._v("0x22C1F7E2")]),t._v(" "),s("td",[t._v("variable")]),t._v(" "),s("td")])])]),t._v(" "),s("h3",{attrs:{id:"example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example"}}),t._v(" Example")]),t._v(" "),s("p",[t._v("For example, the 33-byte (or 0x21-byte in hex) Secp256k1 pubkey\n"),s("code",[t._v("020BD40F225A57ED383B440CF073BC5539D0341F5767D2BF2D78406D00475A2EE9")]),t._v("\nwould be encoded as\n"),s("code",[t._v("EB5AE98721020BD40F225A57ED383B440CF073BC5539D0341F5767D2BF2D78406D00475A2EE9")])]),t._v(" "),s("h3",{attrs:{id:"key-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#key-types"}}),t._v(" Key Types")]),t._v(" "),s("p",[t._v("Each type specifies it's own pubkey, address, and signature format.")]),t._v(" "),s("h4",{attrs:{id:"ed25519"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ed25519"}}),t._v(" Ed25519")]),t._v(" "),s("p",[t._v("TODO: pubkey")]),t._v(" "),s("p",[t._v("The address is the first 20-bytes of the SHA256 hash of the raw 32-byte public key:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("address = SHA256(pubkey)[:20]\n")])])]),s("p",[t._v("The signature is the raw 64-byte ED25519 signature.")]),t._v(" "),s("h4",{attrs:{id:"secp256k1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#secp256k1"}}),t._v(" Secp256k1")]),t._v(" "),s("p",[t._v("TODO: pubkey")]),t._v(" "),s("p",[t._v("The address is the RIPEMD160 hash of the SHA256 hash of the OpenSSL compressed public key:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("address = RIPEMD160(SHA256(pubkey))\n")])])]),s("p",[t._v("This is the same as Bitcoin.")]),t._v(" "),s("p",[t._v("The signature is the 64-byte concatenation of ECDSA "),s("code",[t._v("r")]),t._v(" and "),s("code",[t._v("s")]),t._v(" (ie. "),s("code",[t._v("r || s")]),t._v("),\nwhere "),s("code",[t._v("s")]),t._v(" is lexicographically less than its inverse, to prevent malleability.\nThis is like Ethereum, but without the extra byte for pubkey recovery, since\nTendermint assumes the pubkey is always provided anyway.")]),t._v(" "),s("h4",{attrs:{id:"multisig"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#multisig"}}),t._v(" Multisig")]),t._v(" "),s("p",[t._v("TODO")]),t._v(" "),s("h2",{attrs:{id:"other-common-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#other-common-types"}}),t._v(" Other Common Types")]),t._v(" "),s("h3",{attrs:{id:"bitarray"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bitarray"}}),t._v(" BitArray")]),t._v(" "),s("p",[t._v("The BitArray is used in some consensus messages to represent votes received from\nvalidators, or parts received in a block. It is represented\nwith a struct containing the number of bits ("),s("code",[t._v("Bits")]),t._v(") and the bit-array itself\nencoded in base64 ("),s("code",[t._v("Elems")]),t._v(").")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" BitArray "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Bits  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n    Elems "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint64")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("This type is easily encoded directly by Amino.")]),t._v(" "),s("p",[t._v("Note BitArray receives a special JSON encoding in the form of "),s("code",[t._v("x")]),t._v(" and "),s("code",[t._v("_")]),t._v("\nrepresenting "),s("code",[t._v("1")]),t._v(" and "),s("code",[t._v("0")]),t._v(". Ie. the BitArray "),s("code",[t._v("10110")]),t._v(" would be JSON encoded as\n"),s("code",[t._v('"x_xx_"')])]),t._v(" "),s("h3",{attrs:{id:"part"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#part"}}),t._v(" Part")]),t._v(" "),s("p",[t._v("Part is used to break up blocks into pieces that can be gossiped in parallel\nand securely verified using a Merkle tree of the parts.")]),t._v(" "),s("p",[t._v("Part contains the index of the part ("),s("code",[t._v("Index")]),t._v("), the actual\nunderlying data of the part ("),s("code",[t._v("Bytes")]),t._v("), and a Merkle proof that the part is contained in\nthe set ("),s("code",[t._v("Proof")]),t._v(").")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Part "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Index "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n    Bytes "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v("\n    Proof SimpleProof\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("See details of SimpleProof, below.")]),t._v(" "),s("h3",{attrs:{id:"makeparts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#makeparts"}}),t._v(" MakeParts")]),t._v(" "),s("p",[t._v("Encode an object using Amino and slice it into parts.\nTendermint uses a part size of 65536 bytes, and allows a maximum of 1601 parts\n(see "),s("code",[t._v("types.MaxBlockPartsCount")]),t._v("). This corresponds to the hard-coded block size\nlimit of 100MB.")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MakeParts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("block Block"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("Part\n")])])]),s("h2",{attrs:{id:"merkle-trees"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#merkle-trees"}}),t._v(" Merkle Trees")]),t._v(" "),s("p",[t._v("For an overview of Merkle trees, see\n"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Merkle_tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("wikipedia"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("We use the RFC 6962 specification of a merkle tree, with sha256 as the hash function.\nMerkle trees are used throughout Tendermint to compute a cryptographic digest of a data structure.\nThe differences between RFC 6962 and the simplest form a merkle tree are that:")]),t._v(" "),s("ol",[s("li",[s("p",[t._v('leaf nodes and inner nodes have different hashes.\nThis is for "second pre-image resistance", to prevent the proof to an inner node being valid as the proof of a leaf.\nThe leaf nodes are '),s("code",[t._v("SHA256(0x00 || leaf_data)")]),t._v(", and inner nodes are "),s("code",[t._v("SHA256(0x01 || left_hash || right_hash)")]),t._v(".")])]),t._v(" "),s("li",[s("p",[t._v("When the number of items isn't a power of two, the left half of the tree is as big as it could be.\n(The largest power of two less than the number of items) This allows new leaves to be added with less\nrecomputation. For example:")])])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("   Simple Tree with 6 items           Simple Tree with 7 items\n\n              *                                  *\n             / \\                                / \\\n           /     \\                            /     \\\n         /         \\                        /         \\\n       /             \\                    /             \\\n      *               *                  *               *\n     / \\             / \\                / \\             / \\\n    /   \\           /   \\              /   \\           /   \\\n   /     \\         /     \\            /     \\         /     \\\n  *       *       h4     h5          *       *       *       h6\n / \\     / \\                        / \\     / \\     / \\\nh0  h1  h2 h3                      h0  h1  h2  h3  h4  h5\n")])])]),s("h3",{attrs:{id:"merkleroot"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#merkleroot"}}),t._v(" MerkleRoot")]),t._v(" "),s("p",[t._v("The function "),s("code",[t._v("MerkleRoot")]),t._v(" is a simple recursive function defined as follows:")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SHA256(0x00 || leaf)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("leafHash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("leaf "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" tmhash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" leaf"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SHA256(0x01 || left || right)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("innerHash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" tmhash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x01")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// largest power of 2 less than k")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSplitPoint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MerkleRoot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("leafHash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\tk "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSplitPoint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tleft "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MerkleRoot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tright "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MerkleRoot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("innerHash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Note: "),s("code",[t._v("MerkleRoot")]),t._v(" operates on items which are arbitrary byte arrays, not\nnecessarily hashes. For items which need to be hashed first, we introduce the\n"),s("code",[t._v("Hashes")]),t._v(" function:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("func Hashes(items [][]byte) [][]byte {\n    return SHA256 of each item\n}\n")])])]),s("p",[t._v("Note: we will abuse notion and invoke "),s("code",[t._v("MerkleRoot")]),t._v(" with arguments of type "),s("code",[t._v("struct")]),t._v(" or type "),s("code",[t._v("[]struct")]),t._v(".\nFor "),s("code",[t._v("struct")]),t._v(" arguments, we compute a "),s("code",[t._v("[][]byte")]),t._v(" containing the amino encoding of each\nfield in the struct, in the same order the fields appear in the struct.\nFor "),s("code",[t._v("[]struct")]),t._v(" arguments, we compute a "),s("code",[t._v("[][]byte")]),t._v(" by amino encoding the individual "),s("code",[t._v("struct")]),t._v(" elements.")]),t._v(" "),s("h3",{attrs:{id:"simple-merkle-proof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#simple-merkle-proof"}}),t._v(" Simple Merkle Proof")]),t._v(" "),s("p",[t._v("Proof that a leaf is in a Merkle tree is composed as follows:")]),t._v(" "),s("div",{staticClass:"language-golang extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("type SimpleProof struct {\n        Total int\n        Index int\n        LeafHash []byte\n        Aunts [][]byte\n}\n")])])]),s("p",[t._v("Which is verified as follows:")]),t._v(" "),s("div",{staticClass:"language-golang extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("func (proof SimpleProof) Verify(rootHash []byte, leaf []byte) bool {\n\tassert(proof.LeafHash, leafHash(leaf)\n\n\tcomputedHash := computeHashFromAunts(proof.Index, proof.Total, proof.LeafHash, proof.Aunts)\n    return computedHash == rootHash\n}\n\nfunc computeHashFromAunts(index, total int, leafHash []byte, innerHashes [][]byte) []byte{\n\tassert(index < total && index >= 0 && total > 0)\n\n\tif total == 1{\n\t\tassert(len(proof.Aunts) == 0)\n\t\treturn leafHash\n\t}\n\n\tassert(len(innerHashes) > 0)\n\n\tnumLeft := getSplitPoint(total) // largest power of 2 less than total\n\tif index < numLeft {\n\t\tleftHash := computeHashFromAunts(index, numLeft, leafHash, innerHashes[:len(innerHashes)-1])\n\t\tassert(leftHash != nil)\n\t\treturn innerHash(leftHash, innerHashes[len(innerHashes)-1])\n\t}\n\trightHash := computeHashFromAunts(index-numLeft, total-numLeft, leafHash, innerHashes[:len(innerHashes)-1])\n\tassert(rightHash != nil)\n\treturn innerHash(innerHashes[len(innerHashes)-1], rightHash)\n}\n")])])]),s("p",[t._v("The number of aunts is limited to 100 ("),s("code",[t._v("MaxAunts")]),t._v(") to protect the node against DOS attacks.\nThis limits the tree size to 2^100 leaves, which should be sufficient for any\nconceivable purpose.")]),t._v(" "),s("h3",{attrs:{id:"iavl-tree"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iavl-tree"}}),t._v(" IAVL+ Tree")]),t._v(" "),s("p",[t._v("Because Tendermint only uses a Simple Merkle Tree, application developers are expect to use their own Merkle tree in their applications. For example, the IAVL+ Tree - an immutable self-balancing binary tree for persisting application state is used by the "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/ae77f0080a724b159233bd9b289b2e91c0de21b5/docs/interfaces/lite/specification.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cosmos SDK"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"json"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#json"}}),t._v(" JSON")]),t._v(" "),s("h3",{attrs:{id:"amino-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#amino-2"}}),t._v(" Amino")]),t._v(" "),s("p",[t._v("Amino also supports JSON encoding - registered types are simply encoded as:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('{\n  "type": "<amino type name>",\n  "value": <JSON>\n}\n')])])]),s("p",[t._v("For instance, an ED25519 PubKey would look like:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('{\n  "type": "tendermint/PubKeyEd25519",\n  "value": "uZ4h63OFWuQ36ZZ4Bd6NF+/w9fWUwrOncrQsackrsTk="\n}\n')])])]),s("p",[t._v("Where the "),s("code",[t._v('"value"')]),t._v(" is the base64 encoding of the raw pubkey bytes, and the\n"),s("code",[t._v('"type"')]),t._v(" is the amino name for Ed25519 pubkeys.")]),t._v(" "),s("h3",{attrs:{id:"signed-messages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#signed-messages"}}),t._v(" Signed Messages")]),t._v(" "),s("p",[t._v("Signed messages (eg. votes, proposals) in the consensus are encoded using Amino.")]),t._v(" "),s("p",[t._v("When signing, the elements of a message are re-ordered so the fixed-length fields\nare first, making it easy to quickly check the type, height, and round.\nThe "),s("code",[t._v("ChainID")]),t._v(" is also appended to the end.\nWe call this encoding the SignBytes. For instance, SignBytes for a vote is the Amino encoding of the following struct:")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" CanonicalVote "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tType      "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v("\n\tHeight    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('`binary:"fixed64"`')]),t._v("\n\tRound     "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('`binary:"fixed64"`')]),t._v("\n\tBlockID   CanonicalBlockID\n\tTimestamp time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Time\n\tChainID   "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("The field ordering and the fixed sized encoding for the first three fields is optimized to ease parsing of SignBytes\nin HSMs. It creates fixed offsets for relevant fields that need to be read in this context.\nFor more details, see the "),s("router-link",{attrs:{to:"/spec/consensus/signing.html"}},[t._v("signing spec")]),t._v(".\nAlso, see the motivating discussion in\n"),s("a",{attrs:{href:"https://github.com/tendermint/tendermint/issues/1622",target:"_blank",rel:"noopener noreferrer"}},[t._v("#1622"),s("OutboundLink")],1),t._v(".")],1)])}),[],!1,null,null,null);e.default=n.exports}}]);